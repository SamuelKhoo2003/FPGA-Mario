// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module cvtcolor_og_AxiStream2MatStream_2_Pipeline_MMIterInLoopRow (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        ldata_dout,
        ldata_num_data_valid,
        ldata_fifo_cap,
        ldata_empty_n,
        ldata_read,
        imgInput0_data_din,
        imgInput0_data_num_data_valid,
        imgInput0_data_fifo_cap,
        imgInput0_data_full_n,
        imgInput0_data_write,
        bound,
        last_blk_width_cast2_cast_cast,
        cols_bound_per_npc_load,
        sub,
        last_blk_width_load,
        sub3,
        last_blk_width_cast2_cast_cast_cast
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [511:0] ldata_dout;
input  [2:0] ldata_num_data_valid;
input  [2:0] ldata_fifo_cap;
input   ldata_empty_n;
output   ldata_read;
output  [23:0] imgInput0_data_din;
input  [2:0] imgInput0_data_num_data_valid;
input  [2:0] imgInput0_data_fifo_cap;
input   imgInput0_data_full_n;
output   imgInput0_data_write;
input  [31:0] bound;
input  [3:0] last_blk_width_cast2_cast_cast;
input  [31:0] cols_bound_per_npc_load;
input  [31:0] sub;
input  [3:0] last_blk_width_load;
input  [9:0] sub3;
input  [3:0] last_blk_width_cast2_cast_cast_cast;

reg ap_idle;
reg ldata_read;
reg imgInput0_data_write;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_idle_pp0;
reg   [0:0] icmp_ln1054_reg_777;
reg   [0:0] icmp_ln1054_reg_777_pp0_iter2_reg;
reg   [0:0] icmp_ln1065_reg_793;
reg    ap_predicate_op89_read_state4;
reg    ap_block_state4_pp0_stage0_iter3;
reg   [0:0] icmp_ln1084_reg_789;
reg   [0:0] icmp_ln1084_reg_789_pp0_iter4_reg;
reg    ap_block_state6_pp0_stage0_iter5;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln1054_fu_216_p2;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    ldata_blk_n;
wire    ap_block_pp0_stage0;
reg    imgInput0_data_blk_n;
reg    ap_block_pp0_stage0_11001;
wire   [9:0] last_blk_width_cast2_cast_cast_cast_cast_cast_fu_178_p1;
reg   [9:0] last_blk_width_cast2_cast_cast_cast_cast_cast_reg_767;
wire  signed [4:0] last_blk_width_cast2_cast_cast_cast8_fu_182_p1;
reg  signed [4:0] last_blk_width_cast2_cast_cast_cast8_reg_772;
reg   [0:0] icmp_ln1054_reg_777_pp0_iter3_reg;
reg   [0:0] icmp_ln1054_reg_777_pp0_iter4_reg;
wire   [0:0] bLast_width_fu_227_p2;
reg   [0:0] bLast_width_reg_781;
reg   [0:0] bLast_width_reg_781_pp0_iter2_reg;
reg   [0:0] bLast_width_reg_781_pp0_iter3_reg;
reg   [0:0] bLast_width_reg_781_pp0_iter4_reg;
wire   [0:0] icmp_ln1084_fu_232_p2;
reg   [0:0] icmp_ln1084_reg_789_pp0_iter2_reg;
reg   [0:0] icmp_ln1084_reg_789_pp0_iter3_reg;
wire   [0:0] icmp_ln1065_fu_292_p2;
reg   [0:0] icmp_ln1065_reg_793_pp0_iter3_reg;
reg   [0:0] icmp_ln1065_reg_793_pp0_iter4_reg;
wire   [0:0] icmp_ln1074_fu_326_p2;
reg   [0:0] icmp_ln1074_reg_797;
reg   [0:0] icmp_ln1074_reg_797_pp0_iter3_reg;
wire   [8:0] trunc_ln1074_fu_332_p1;
reg   [8:0] trunc_ln1074_reg_804;
wire   [8:0] trunc_ln1074_1_fu_336_p1;
reg   [8:0] trunc_ln1074_1_reg_812;
wire   [0:0] icmp_ln1066_fu_351_p2;
reg   [0:0] icmp_ln1066_reg_818;
reg   [0:0] icmp_ln1066_reg_818_pp0_iter3_reg;
wire   [4:0] trunc_ln1067_1_fu_361_p1;
reg   [4:0] trunc_ln1067_1_reg_823;
reg   [4:0] trunc_ln1067_1_reg_823_pp0_iter3_reg;
wire   [8:0] sub_ln1067_fu_365_p2;
reg   [8:0] sub_ln1067_reg_832;
wire   [8:0] sub_ln1071_fu_385_p2;
reg   [8:0] sub_ln1071_reg_837;
wire   [0:0] icmp_ln1071_fu_391_p2;
reg   [0:0] icmp_ln1071_reg_842;
reg   [0:0] icmp_ln1071_reg_842_pp0_iter3_reg;
wire   [4:0] trunc_ln1071_1_fu_397_p1;
reg   [4:0] trunc_ln1071_1_reg_850;
reg   [4:0] trunc_ln1071_1_reg_850_pp0_iter3_reg;
wire   [8:0] sub_ln1074_2_fu_425_p2;
reg   [8:0] sub_ln1074_2_reg_856;
wire   [8:0] sub_ln1074_3_fu_434_p2;
reg   [8:0] sub_ln1074_3_reg_861;
wire   [23:0] trunc_ln1074_2_fu_461_p1;
reg   [23:0] trunc_ln1074_2_reg_866;
wire   [511:0] zext_ln1067_fu_465_p1;
reg   [511:0] zext_ln1067_reg_871;
wire   [511:0] lshr_ln1067_fu_468_p2;
reg   [511:0] lshr_ln1067_reg_876;
reg   [511:0] val_2_reg_881;
wire   [511:0] lshr_ln1071_fu_483_p2;
reg   [511:0] lshr_ln1071_reg_886;
wire   [4:0] sub_ln1071_2_fu_494_p2;
reg   [4:0] sub_ln1071_2_reg_891;
wire   [23:0] localbuffer_5_fu_530_p2;
wire   [23:0] localbuffer_4_fu_679_p2;
reg   [23:0] localbuffer_4_reg_901;
wire   [23:0] lshr_ln1082_fu_694_p2;
reg   [23:0] lshr_ln1082_reg_906;
reg    ap_condition_exit_pp0_iter2_stage0;
reg   [23:0] ap_phi_mux_localbuffer_1_phi_fu_168_p4;
reg   [23:0] ap_phi_reg_pp0_iter5_localbuffer_1_reg_165;
wire   [23:0] ap_phi_reg_pp0_iter0_localbuffer_1_reg_165;
reg   [23:0] ap_phi_reg_pp0_iter1_localbuffer_1_reg_165;
reg   [23:0] ap_phi_reg_pp0_iter2_localbuffer_1_reg_165;
reg   [23:0] ap_phi_reg_pp0_iter3_localbuffer_1_reg_165;
reg   [23:0] ap_phi_reg_pp0_iter4_localbuffer_1_reg_165;
reg   [31:0] rem_fu_94;
wire   [31:0] rem_3_fu_340_p2;
wire   [31:0] rem_2_fu_401_p2;
wire    ap_loop_init;
reg   [30:0] i_fu_98;
wire   [30:0] add_ln1054_fu_221_p2;
reg   [31:0] j_fu_102;
wire   [31:0] j_3_fu_243_p3;
reg   [511:0] val_fu_106;
reg    ap_block_pp0_stage0_01001;
wire  signed [4:0] last_blk_width_cast2_cast_cast_cast_cast_fu_174_p1;
wire   [31:0] zext_ln1054_fu_212_p1;
wire   [31:0] add_ln1086_fu_237_p2;
wire   [3:0] xf_bits_per_clock_fu_264_p3;
wire  signed [4:0] sext_ln1060_fu_270_p1;
wire   [9:0] ptr_width_minus_fu_282_p3;
wire   [31:0] zext_ln1060_fu_274_p1;
wire   [9:0] add_ln1074_fu_298_p2;
wire   [9:0] select_ln1074_fu_303_p3;
wire   [31:0] zext_ln1074_fu_310_p1;
wire   [31:0] sub_ln1074_1_fu_320_p2;
wire   [31:0] sub_ln1074_fu_314_p2;
wire   [8:0] trunc_ln1067_fu_357_p1;
wire   [5:0] zext_ln1060_1_fu_278_p1;
wire  signed [5:0] add_ln1071_fu_371_p2;
wire  signed [8:0] sext_ln1071_1_fu_381_p1;
wire  signed [31:0] sext_ln1071_fu_377_p1;
wire   [31:0] zext_ln1061_fu_288_p1;
reg   [511:0] tmp_2_fu_415_p4;
wire   [8:0] xor_ln1074_fu_429_p2;
wire   [8:0] select_ln1074_3_fu_445_p3;
wire   [511:0] select_ln1074_2_fu_438_p3;
wire   [511:0] zext_ln1074_1_fu_451_p1;
wire   [511:0] lshr_ln1074_fu_455_p2;
wire   [8:0] xor_ln1071_fu_474_p2;
wire   [511:0] zext_ln1071_fu_479_p1;
wire   [4:0] select_ln1071_fu_489_p3;
wire   [8:0] select_ln1074_1_fu_505_p3;
wire   [8:0] xor_ln1074_1_fu_510_p2;
wire   [511:0] zext_ln1074_2_fu_516_p1;
wire   [511:0] lshr_ln1074_1_fu_520_p2;
wire   [23:0] trunc_ln1074_3_fu_526_p1;
wire   [511:0] lshr_ln1067_1_fu_538_p2;
wire   [23:0] trunc_ln1067_2_fu_535_p1;
wire   [23:0] trunc_ln1067_3_fu_543_p1;
wire   [4:0] sub_ln1067_1_fu_553_p2;
wire   [23:0] zext_ln1067_1_fu_558_p1;
wire   [23:0] and_ln1067_fu_547_p2;
wire   [23:0] lshr_ln1067_2_fu_562_p2;
wire   [23:0] localbuffer_fu_568_p2;
wire   [23:0] trunc_ln1049_fu_581_p1;
wire   [23:0] trunc_ln1071_fu_584_p1;
wire   [4:0] sub_ln1071_1_fu_593_p2;
wire   [4:0] select_ln1071_2_fu_603_p3;
wire   [4:0] select_ln1071_1_fu_598_p3;
wire   [23:0] and_ln1071_fu_587_p2;
wire   [23:0] zext_ln1071_1_fu_609_p1;
wire   [23:0] shl_ln1071_fu_620_p2;
reg   [23:0] tmp_fu_626_p4;
wire   [23:0] zext_ln1071_2_fu_613_p1;
wire   [23:0] zext_ln1071_3_fu_617_p1;
wire   [23:0] shl_ln1071_1_fu_643_p2;
wire   [23:0] lshr_ln1071_1_fu_649_p2;
wire   [23:0] and_ln1071_1_fu_655_p2;
wire   [23:0] localbuffer_3_fu_574_p3;
wire   [23:0] xor_ln1071_1_fu_661_p2;
wire   [23:0] select_ln1071_3_fu_636_p3;
wire   [23:0] and_ln1071_2_fu_667_p2;
wire   [23:0] and_ln1071_3_fu_673_p2;
wire   [4:0] sub_ln1082_fu_685_p2;
wire   [23:0] zext_ln1082_fu_690_p1;
wire   [23:0] select_ln1059_fu_700_p3;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_682;
reg    ap_condition_685;
reg    ap_condition_688;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 rem_fu_94 = 32'd0;
#0 i_fu_98 = 31'd0;
#0 j_fu_102 = 32'd0;
#0 val_fu_106 = 512'd0;
#0 ap_done_reg = 1'b0;
end

cvtcolor_og_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter1_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter4_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter2_stage0)) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        if (((icmp_ln1065_reg_793_pp0_iter3_reg == 1'd0) & (icmp_ln1054_reg_777_pp0_iter3_reg == 1'd1))) begin
            ap_phi_reg_pp0_iter5_localbuffer_1_reg_165 <= localbuffer_5_fu_530_p2;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter5_localbuffer_1_reg_165 <= ap_phi_reg_pp0_iter4_localbuffer_1_reg_165;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            i_fu_98 <= 31'd0;
        end else if (((icmp_ln1054_fu_216_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            i_fu_98 <= add_ln1054_fu_221_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            j_fu_102 <= 32'd0;
        end else if (((icmp_ln1054_fu_216_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            j_fu_102 <= j_3_fu_243_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            rem_fu_94 <= 32'd0;
        end else if ((1'b1 == ap_condition_685)) begin
            rem_fu_94 <= rem_2_fu_401_p2;
        end else if ((1'b1 == ap_condition_682)) begin
            rem_fu_94 <= rem_3_fu_340_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            val_fu_106 <= 512'd0;
        end else if ((1'b1 == ap_condition_688)) begin
            val_fu_106 <= ldata_dout;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
        bLast_width_reg_781 <= bLast_width_fu_227_p2;
        icmp_ln1054_reg_777 <= icmp_ln1054_fu_216_p2;
        icmp_ln1084_reg_789 <= icmp_ln1084_fu_232_p2;
        last_blk_width_cast2_cast_cast_cast8_reg_772 <= last_blk_width_cast2_cast_cast_cast8_fu_182_p1;
        last_blk_width_cast2_cast_cast_cast_cast_cast_reg_767[4 : 0] <= last_blk_width_cast2_cast_cast_cast_cast_cast_fu_178_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        bLast_width_reg_781_pp0_iter2_reg <= bLast_width_reg_781;
        bLast_width_reg_781_pp0_iter3_reg <= bLast_width_reg_781_pp0_iter2_reg;
        bLast_width_reg_781_pp0_iter4_reg <= bLast_width_reg_781_pp0_iter3_reg;
        icmp_ln1054_reg_777_pp0_iter2_reg <= icmp_ln1054_reg_777;
        icmp_ln1054_reg_777_pp0_iter3_reg <= icmp_ln1054_reg_777_pp0_iter2_reg;
        icmp_ln1054_reg_777_pp0_iter4_reg <= icmp_ln1054_reg_777_pp0_iter3_reg;
        icmp_ln1065_reg_793 <= icmp_ln1065_fu_292_p2;
        icmp_ln1065_reg_793_pp0_iter3_reg <= icmp_ln1065_reg_793;
        icmp_ln1065_reg_793_pp0_iter4_reg <= icmp_ln1065_reg_793_pp0_iter3_reg;
        icmp_ln1066_reg_818 <= icmp_ln1066_fu_351_p2;
        icmp_ln1066_reg_818_pp0_iter3_reg <= icmp_ln1066_reg_818;
        icmp_ln1071_reg_842 <= icmp_ln1071_fu_391_p2;
        icmp_ln1071_reg_842_pp0_iter3_reg <= icmp_ln1071_reg_842;
        icmp_ln1074_reg_797 <= icmp_ln1074_fu_326_p2;
        icmp_ln1074_reg_797_pp0_iter3_reg <= icmp_ln1074_reg_797;
        icmp_ln1084_reg_789_pp0_iter2_reg <= icmp_ln1084_reg_789;
        icmp_ln1084_reg_789_pp0_iter3_reg <= icmp_ln1084_reg_789_pp0_iter2_reg;
        icmp_ln1084_reg_789_pp0_iter4_reg <= icmp_ln1084_reg_789_pp0_iter3_reg;
        localbuffer_4_reg_901 <= localbuffer_4_fu_679_p2;
        lshr_ln1067_reg_876 <= lshr_ln1067_fu_468_p2;
        lshr_ln1071_reg_886 <= lshr_ln1071_fu_483_p2;
        lshr_ln1082_reg_906 <= lshr_ln1082_fu_694_p2;
        sub_ln1067_reg_832 <= sub_ln1067_fu_365_p2;
        sub_ln1071_2_reg_891 <= sub_ln1071_2_fu_494_p2;
        sub_ln1071_reg_837 <= sub_ln1071_fu_385_p2;
        sub_ln1074_2_reg_856 <= sub_ln1074_2_fu_425_p2;
        sub_ln1074_3_reg_861 <= sub_ln1074_3_fu_434_p2;
        trunc_ln1067_1_reg_823 <= trunc_ln1067_1_fu_361_p1;
        trunc_ln1067_1_reg_823_pp0_iter3_reg <= trunc_ln1067_1_reg_823;
        trunc_ln1071_1_reg_850 <= trunc_ln1071_1_fu_397_p1;
        trunc_ln1071_1_reg_850_pp0_iter3_reg <= trunc_ln1071_1_reg_850;
        trunc_ln1074_1_reg_812 <= trunc_ln1074_1_fu_336_p1;
        trunc_ln1074_2_reg_866 <= trunc_ln1074_2_fu_461_p1;
        trunc_ln1074_reg_804 <= trunc_ln1074_fu_332_p1;
        val_2_reg_881 <= ldata_dout;
        zext_ln1067_reg_871[8 : 0] <= zext_ln1067_fu_465_p1[8 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_localbuffer_1_reg_165 <= ap_phi_reg_pp0_iter0_localbuffer_1_reg_165;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter2_localbuffer_1_reg_165 <= ap_phi_reg_pp0_iter1_localbuffer_1_reg_165;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        ap_phi_reg_pp0_iter3_localbuffer_1_reg_165 <= ap_phi_reg_pp0_iter2_localbuffer_1_reg_165;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        ap_phi_reg_pp0_iter4_localbuffer_1_reg_165 <= ap_phi_reg_pp0_iter3_localbuffer_1_reg_165;
    end
end

always @ (*) begin
    if (((icmp_ln1054_fu_216_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln1054_reg_777 == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        ap_condition_exit_pp0_iter2_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter2_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter4_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln1065_reg_793_pp0_iter4_reg == 1'd1) & (icmp_ln1054_reg_777_pp0_iter4_reg == 1'd1))) begin
        ap_phi_mux_localbuffer_1_phi_fu_168_p4 = localbuffer_4_reg_901;
    end else begin
        ap_phi_mux_localbuffer_1_phi_fu_168_p4 = ap_phi_reg_pp0_iter5_localbuffer_1_reg_165;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln1084_reg_789_pp0_iter4_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        imgInput0_data_blk_n = imgInput0_data_full_n;
    end else begin
        imgInput0_data_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln1084_reg_789_pp0_iter4_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        imgInput0_data_write = 1'b1;
    end else begin
        imgInput0_data_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_predicate_op89_read_state4 == 1'b1) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        ldata_blk_n = ldata_empty_n;
    end else begin
        ldata_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op89_read_state4 == 1'b1) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        ldata_read = 1'b1;
    end else begin
        ldata_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln1054_fu_221_p2 = (i_fu_98 + 31'd1);

assign add_ln1071_fu_371_p2 = ($signed(zext_ln1060_1_fu_278_p1) + $signed(6'd63));

assign add_ln1074_fu_298_p2 = (last_blk_width_cast2_cast_cast_cast_cast_cast_reg_767 + 10'd511);

assign add_ln1086_fu_237_p2 = (j_fu_102 + 32'd1);

assign and_ln1067_fu_547_p2 = (trunc_ln1067_3_fu_543_p1 & trunc_ln1067_2_fu_535_p1);

assign and_ln1071_1_fu_655_p2 = (shl_ln1071_1_fu_643_p2 & lshr_ln1071_1_fu_649_p2);

assign and_ln1071_2_fu_667_p2 = (xor_ln1071_1_fu_661_p2 & localbuffer_3_fu_574_p3);

assign and_ln1071_3_fu_673_p2 = (select_ln1071_3_fu_636_p3 & and_ln1071_1_fu_655_p2);

assign and_ln1071_fu_587_p2 = (trunc_ln1071_fu_584_p1 & trunc_ln1049_fu_581_p1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_block_state6_pp0_stage0_iter5)) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_block_state4_pp0_stage0_iter3)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_block_state6_pp0_stage0_iter5)) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_block_state4_pp0_stage0_iter3)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_block_state6_pp0_stage0_iter5)) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_block_state4_pp0_stage0_iter3)));
end

always @ (*) begin
    ap_block_state4_pp0_stage0_iter3 = ((ap_predicate_op89_read_state4 == 1'b1) & (ldata_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state6_pp0_stage0_iter5 = ((icmp_ln1084_reg_789_pp0_iter4_reg == 1'd1) & (imgInput0_data_full_n == 1'b0));
end

always @ (*) begin
    ap_condition_682 = ((icmp_ln1054_reg_777 == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln1065_fu_292_p2 == 1'd0));
end

always @ (*) begin
    ap_condition_685 = ((icmp_ln1054_reg_777 == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln1065_fu_292_p2 == 1'd1));
end

always @ (*) begin
    ap_condition_688 = ((icmp_ln1065_reg_793 == 1'd1) & (icmp_ln1054_reg_777_pp0_iter2_reg == 1'd1) & (ap_enable_reg_pp0_iter3 == 1'b1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter1_stage0;

assign ap_phi_reg_pp0_iter0_localbuffer_1_reg_165 = 'bx;

always @ (*) begin
    ap_predicate_op89_read_state4 = ((icmp_ln1065_reg_793 == 1'd1) & (icmp_ln1054_reg_777_pp0_iter2_reg == 1'd1));
end

assign bLast_width_fu_227_p2 = ((j_fu_102 == sub) ? 1'b1 : 1'b0);

assign icmp_ln1054_fu_216_p2 = (($signed(zext_ln1054_fu_212_p1) < $signed(bound)) ? 1'b1 : 1'b0);

assign icmp_ln1065_fu_292_p2 = (($signed(rem_fu_94) < $signed(zext_ln1060_fu_274_p1)) ? 1'b1 : 1'b0);

assign icmp_ln1066_fu_351_p2 = ((rem_fu_94 == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln1071_fu_391_p2 = ((rem_fu_94 > sext_ln1071_fu_377_p1) ? 1'b1 : 1'b0);

assign icmp_ln1074_fu_326_p2 = ((sub_ln1074_1_fu_320_p2 > sub_ln1074_fu_314_p2) ? 1'b1 : 1'b0);

assign icmp_ln1084_fu_232_p2 = (($signed(j_fu_102) < $signed(cols_bound_per_npc_load)) ? 1'b1 : 1'b0);

assign imgInput0_data_din = (select_ln1059_fu_700_p3 & ap_phi_mux_localbuffer_1_phi_fu_168_p4);

assign j_3_fu_243_p3 = ((bLast_width_fu_227_p2[0:0] == 1'b1) ? 32'd0 : add_ln1086_fu_237_p2);

assign last_blk_width_cast2_cast_cast_cast8_fu_182_p1 = $signed(last_blk_width_cast2_cast_cast);

assign last_blk_width_cast2_cast_cast_cast_cast_cast_fu_178_p1 = $unsigned(last_blk_width_cast2_cast_cast_cast_cast_fu_174_p1);

assign last_blk_width_cast2_cast_cast_cast_cast_fu_174_p1 = $signed(last_blk_width_cast2_cast_cast_cast);

assign localbuffer_3_fu_574_p3 = ((icmp_ln1066_reg_818_pp0_iter3_reg[0:0] == 1'b1) ? 24'd0 : localbuffer_fu_568_p2);

assign localbuffer_4_fu_679_p2 = (and_ln1071_3_fu_673_p2 | and_ln1071_2_fu_667_p2);

assign localbuffer_5_fu_530_p2 = (trunc_ln1074_3_fu_526_p1 & trunc_ln1074_2_reg_866);

assign localbuffer_fu_568_p2 = (lshr_ln1067_2_fu_562_p2 & and_ln1067_fu_547_p2);

assign lshr_ln1067_1_fu_538_p2 = 512'd13407807929942597099574024998205846127479365820592393377723561443721764030073546976801874298166903427690031858186486050853753882811946569946433649006084095 >> zext_ln1067_reg_871;

assign lshr_ln1067_2_fu_562_p2 = 24'd16777215 >> zext_ln1067_1_fu_558_p1;

assign lshr_ln1067_fu_468_p2 = val_fu_106 >> zext_ln1067_fu_465_p1;

assign lshr_ln1071_1_fu_649_p2 = 24'd16777215 >> zext_ln1071_3_fu_617_p1;

assign lshr_ln1071_fu_483_p2 = 512'd13407807929942597099574024998205846127479365820592393377723561443721764030073546976801874298166903427690031858186486050853753882811946569946433649006084095 >> zext_ln1071_fu_479_p1;

assign lshr_ln1074_1_fu_520_p2 = 512'd13407807929942597099574024998205846127479365820592393377723561443721764030073546976801874298166903427690031858186486050853753882811946569946433649006084095 >> zext_ln1074_2_fu_516_p1;

assign lshr_ln1074_fu_455_p2 = select_ln1074_2_fu_438_p3 >> zext_ln1074_1_fu_451_p1;

assign lshr_ln1082_fu_694_p2 = 24'd16777215 >> zext_ln1082_fu_690_p1;

assign ptr_width_minus_fu_282_p3 = ((bLast_width_reg_781[0:0] == 1'b1) ? sub3 : 10'd488);

assign rem_2_fu_401_p2 = (rem_fu_94 + zext_ln1061_fu_288_p1);

assign rem_3_fu_340_p2 = (rem_fu_94 - zext_ln1060_fu_274_p1);

assign select_ln1059_fu_700_p3 = ((bLast_width_reg_781_pp0_iter4_reg[0:0] == 1'b1) ? lshr_ln1082_reg_906 : 24'd16777215);

assign select_ln1071_1_fu_598_p3 = ((icmp_ln1071_reg_842_pp0_iter3_reg[0:0] == 1'b1) ? trunc_ln1071_1_reg_850_pp0_iter3_reg : trunc_ln1067_1_reg_823_pp0_iter3_reg);

assign select_ln1071_2_fu_603_p3 = ((icmp_ln1071_reg_842_pp0_iter3_reg[0:0] == 1'b1) ? sub_ln1071_1_fu_593_p2 : trunc_ln1067_1_reg_823_pp0_iter3_reg);

assign select_ln1071_3_fu_636_p3 = ((icmp_ln1071_reg_842_pp0_iter3_reg[0:0] == 1'b1) ? tmp_fu_626_p4 : shl_ln1071_fu_620_p2);

assign select_ln1071_fu_489_p3 = ((icmp_ln1071_reg_842[0:0] == 1'b1) ? trunc_ln1067_1_reg_823 : trunc_ln1071_1_reg_850);

assign select_ln1074_1_fu_505_p3 = ((icmp_ln1074_reg_797_pp0_iter3_reg[0:0] == 1'b1) ? sub_ln1074_2_reg_856 : sub_ln1074_3_reg_861);

assign select_ln1074_2_fu_438_p3 = ((icmp_ln1074_reg_797[0:0] == 1'b1) ? tmp_2_fu_415_p4 : val_fu_106);

assign select_ln1074_3_fu_445_p3 = ((icmp_ln1074_reg_797[0:0] == 1'b1) ? xor_ln1074_fu_429_p2 : trunc_ln1074_reg_804);

assign select_ln1074_fu_303_p3 = ((bLast_width_reg_781[0:0] == 1'b1) ? add_ln1074_fu_298_p2 : 10'd535);

assign sext_ln1060_fu_270_p1 = $signed(xf_bits_per_clock_fu_264_p3);

assign sext_ln1071_1_fu_381_p1 = add_ln1071_fu_371_p2;

assign sext_ln1071_fu_377_p1 = add_ln1071_fu_371_p2;

assign shl_ln1071_1_fu_643_p2 = 24'd16777215 << zext_ln1071_2_fu_613_p1;

assign shl_ln1071_fu_620_p2 = and_ln1071_fu_587_p2 << zext_ln1071_1_fu_609_p1;

assign sub_ln1067_1_fu_553_p2 = ($signed(5'd24) - $signed(trunc_ln1067_1_reg_823_pp0_iter3_reg));

assign sub_ln1067_fu_365_p2 = (9'd0 - trunc_ln1067_fu_357_p1);

assign sub_ln1071_1_fu_593_p2 = ($signed(5'd23) - $signed(trunc_ln1067_1_reg_823_pp0_iter3_reg));

assign sub_ln1071_2_fu_494_p2 = ($signed(5'd23) - $signed(select_ln1071_fu_489_p3));

assign sub_ln1071_fu_385_p2 = ($signed(sext_ln1071_1_fu_381_p1) - $signed(trunc_ln1067_fu_357_p1));

assign sub_ln1074_1_fu_320_p2 = (32'd512 - rem_fu_94);

assign sub_ln1074_2_fu_425_p2 = (trunc_ln1074_reg_804 - trunc_ln1074_1_reg_812);

assign sub_ln1074_3_fu_434_p2 = (trunc_ln1074_1_reg_812 - trunc_ln1074_reg_804);

assign sub_ln1074_fu_314_p2 = (zext_ln1074_fu_310_p1 - rem_fu_94);

assign sub_ln1082_fu_685_p2 = ($signed(5'd24) - $signed(last_blk_width_cast2_cast_cast_cast8_reg_772));

integer ap_tvar_int_0;

always @ (val_fu_106) begin
    for (ap_tvar_int_0 = 512 - 1; ap_tvar_int_0 >= 0; ap_tvar_int_0 = ap_tvar_int_0 - 1) begin
        if (ap_tvar_int_0 > 511 - 0) begin
            tmp_2_fu_415_p4[ap_tvar_int_0] = 1'b0;
        end else begin
            tmp_2_fu_415_p4[ap_tvar_int_0] = val_fu_106[511 - ap_tvar_int_0];
        end
    end
end

integer ap_tvar_int_1;

always @ (shl_ln1071_fu_620_p2) begin
    for (ap_tvar_int_1 = 24 - 1; ap_tvar_int_1 >= 0; ap_tvar_int_1 = ap_tvar_int_1 - 1) begin
        if (ap_tvar_int_1 > 23 - 0) begin
            tmp_fu_626_p4[ap_tvar_int_1] = 1'b0;
        end else begin
            tmp_fu_626_p4[ap_tvar_int_1] = shl_ln1071_fu_620_p2[23 - ap_tvar_int_1];
        end
    end
end

assign trunc_ln1049_fu_581_p1 = val_2_reg_881[23:0];

assign trunc_ln1067_1_fu_361_p1 = rem_fu_94[4:0];

assign trunc_ln1067_2_fu_535_p1 = lshr_ln1067_reg_876[23:0];

assign trunc_ln1067_3_fu_543_p1 = lshr_ln1067_1_fu_538_p2[23:0];

assign trunc_ln1067_fu_357_p1 = rem_fu_94[8:0];

assign trunc_ln1071_1_fu_397_p1 = add_ln1071_fu_371_p2[4:0];

assign trunc_ln1071_fu_584_p1 = lshr_ln1071_reg_886[23:0];

assign trunc_ln1074_1_fu_336_p1 = sub_ln1074_fu_314_p2[8:0];

assign trunc_ln1074_2_fu_461_p1 = lshr_ln1074_fu_455_p2[23:0];

assign trunc_ln1074_3_fu_526_p1 = lshr_ln1074_1_fu_520_p2[23:0];

assign trunc_ln1074_fu_332_p1 = sub_ln1074_1_fu_320_p2[8:0];

assign xf_bits_per_clock_fu_264_p3 = ((bLast_width_reg_781[0:0] == 1'b1) ? last_blk_width_load : 4'd8);

assign xor_ln1071_1_fu_661_p2 = (24'd16777215 ^ and_ln1071_1_fu_655_p2);

assign xor_ln1071_fu_474_p2 = (sub_ln1071_reg_837 ^ 9'd511);

assign xor_ln1074_1_fu_510_p2 = (select_ln1074_1_fu_505_p3 ^ 9'd511);

assign xor_ln1074_fu_429_p2 = (trunc_ln1074_reg_804 ^ 9'd511);

assign zext_ln1054_fu_212_p1 = i_fu_98;

assign zext_ln1060_1_fu_278_p1 = $unsigned(sext_ln1060_fu_270_p1);

assign zext_ln1060_fu_274_p1 = $unsigned(sext_ln1060_fu_270_p1);

assign zext_ln1061_fu_288_p1 = ptr_width_minus_fu_282_p3;

assign zext_ln1067_1_fu_558_p1 = sub_ln1067_1_fu_553_p2;

assign zext_ln1067_fu_465_p1 = sub_ln1067_reg_832;

assign zext_ln1071_1_fu_609_p1 = select_ln1071_2_fu_603_p3;

assign zext_ln1071_2_fu_613_p1 = select_ln1071_1_fu_598_p3;

assign zext_ln1071_3_fu_617_p1 = sub_ln1071_2_reg_891;

assign zext_ln1071_fu_479_p1 = xor_ln1071_fu_474_p2;

assign zext_ln1074_1_fu_451_p1 = select_ln1074_3_fu_445_p3;

assign zext_ln1074_2_fu_516_p1 = xor_ln1074_1_fu_510_p2;

assign zext_ln1074_fu_310_p1 = select_ln1074_fu_303_p3;

assign zext_ln1082_fu_690_p1 = sub_ln1082_fu_685_p2;

always @ (posedge ap_clk) begin
    last_blk_width_cast2_cast_cast_cast_cast_cast_reg_767[9:5] <= 5'b00000;
    zext_ln1067_reg_871[511:9] <= 503'b
end

endmodule //cvtcolor_og_AxiStream2MatStream_2_Pipeline_MMIterInLoopRow
