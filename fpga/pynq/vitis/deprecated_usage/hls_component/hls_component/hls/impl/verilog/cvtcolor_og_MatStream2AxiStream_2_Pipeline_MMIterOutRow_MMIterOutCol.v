// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module cvtcolor_og_MatStream2AxiStream_2_Pipeline_MMIterOutRow_MMIterOutCol (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        imgOutput0_data_dout,
        imgOutput0_data_num_data_valid,
        imgOutput0_data_fifo_cap,
        imgOutput0_data_empty_n,
        imgOutput0_data_read,
        ldata_din,
        ldata_num_data_valid,
        ldata_fifo_cap,
        ldata_full_n,
        ldata_write,
        bound,
        empty,
        sub,
        last_blk_width_load,
        cols_bound_per_npc_load,
        localbuffer_out,
        localbuffer_out_ap_vld,
        filled_out,
        filled_out_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [7:0] imgOutput0_data_dout;
input  [2:0] imgOutput0_data_num_data_valid;
input  [2:0] imgOutput0_data_fifo_cap;
input   imgOutput0_data_empty_n;
output   imgOutput0_data_read;
output  [511:0] ldata_din;
input  [2:0] ldata_num_data_valid;
input  [2:0] ldata_fifo_cap;
input   ldata_full_n;
output   ldata_write;
input  [31:0] bound;
input  [15:0] empty;
input  [31:0] sub;
input  [3:0] last_blk_width_load;
input  [31:0] cols_bound_per_npc_load;
output  [511:0] localbuffer_out;
output   localbuffer_out_ap_vld;
output  [9:0] filled_out;
output   filled_out_ap_vld;

reg ap_idle;
reg imgOutput0_data_read;
reg ldata_write;
reg localbuffer_out_ap_vld;
reg filled_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_idle_pp0;
reg   [0:0] icmp_ln1301_reg_448;
reg   [0:0] icmp_ln1315_reg_457;
reg    ap_predicate_op43_read_state3;
reg    ap_block_state3_pp0_stage0_iter2;
reg   [0:0] icmp_ln1301_reg_448_pp0_iter3_reg;
reg   [0:0] icmp_ln1324_reg_473;
reg   [0:0] icmp_ln1324_reg_473_pp0_iter3_reg;
reg    ap_predicate_op67_write_state5;
reg    ap_block_state5_pp0_stage0_iter4;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln1301_fu_200_p2;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    imgOutput0_data_blk_n;
wire    ap_block_pp0_stage0;
reg    ldata_blk_n;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln1301_reg_448_pp0_iter2_reg;
wire   [0:0] bLast_fu_231_p2;
reg   [0:0] bLast_reg_452;
wire   [0:0] icmp_ln1315_fu_236_p2;
reg   [9:0] filled_1_reg_461;
wire   [0:0] icmp_ln1324_fu_277_p2;
wire   [511:0] zext_ln1314_fu_303_p1;
reg   [511:0] zext_ln1314_reg_477;
wire   [511:0] tempval_fu_310_p2;
reg   [511:0] tempval_reg_483;
reg   [0:0] tmp_1_reg_488;
wire   [9:0] trunc_ln1332_fu_333_p1;
reg   [9:0] trunc_ln1332_reg_493;
wire   [8:0] sub_ln1332_1_fu_341_p2;
reg   [8:0] sub_ln1332_1_reg_498;
reg    ap_condition_exit_pp0_iter2_stage0;
reg   [9:0] ap_phi_mux_conv3_i12_i_i923_pn_phi_fu_160_p4;
wire   [9:0] or_ln_fu_283_p3;
wire   [9:0] ap_phi_reg_pp0_iter2_conv3_i12_i_i923_pn_reg_157;
wire   [9:0] zext_ln1313_fu_266_p1;
wire   [7:0] ap_phi_reg_pp0_iter0_val_1_reg_166;
reg   [7:0] ap_phi_reg_pp0_iter1_val_1_reg_166;
reg   [7:0] ap_phi_reg_pp0_iter2_val_1_reg_166;
reg   [7:0] ap_phi_reg_pp0_iter3_val_1_reg_166;
reg   [9:0] filled_fu_84;
wire   [9:0] filled_next_fu_292_p2;
wire    ap_loop_init;
reg   [511:0] localbuffer_fu_88;
wire   [511:0] localbuffer_2_fu_372_p3;
wire   [511:0] localbuffer_1_fu_350_p2;
reg   [15:0] j_fu_92;
wire   [15:0] add_ln1306_fu_241_p2;
reg   [31:0] indvar_flatten_fu_96;
wire   [31:0] add_ln1301_fu_205_p2;
reg    ap_block_pp0_stage0_01001;
wire   [0:0] icmp_ln1306_fu_214_p2;
wire   [15:0] select_ln1294_fu_219_p3;
wire   [31:0] zext_ln1306_fu_227_p1;
wire   [3:0] xf_bits_per_clock_fu_260_p3;
wire   [9:0] sub_ln1324_fu_271_p2;
wire   [511:0] zext_ln1320_fu_307_p1;
wire   [10:0] zext_ln1332_fu_316_p1;
wire   [10:0] sub_ln1332_fu_319_p2;
wire   [8:0] trunc_ln1332_1_fu_337_p1;
wire   [511:0] zext_ln1332_1_fu_356_p1;
wire   [511:0] zext_ln1332_2_fu_364_p1;
wire   [511:0] shl_ln1332_fu_359_p2;
wire   [511:0] lshr_ln1332_fu_367_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_195;
reg    ap_condition_400;
reg    ap_condition_403;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 filled_fu_84 = 10'd0;
#0 localbuffer_fu_88 = 512'd0;
#0 j_fu_92 = 16'd0;
#0 indvar_flatten_fu_96 = 32'd0;
#0 ap_done_reg = 1'b0;
end

cvtcolor_og_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter1_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter3_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter2_stage0)) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_195)) begin
        if (((icmp_ln1301_fu_200_p2 == 1'd0) & (icmp_ln1315_fu_236_p2 == 1'd0))) begin
            ap_phi_reg_pp0_iter2_val_1_reg_166 <= 8'd0;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter2_val_1_reg_166 <= ap_phi_reg_pp0_iter1_val_1_reg_166;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        if (((icmp_ln1315_reg_457 == 1'd1) & (icmp_ln1301_reg_448 == 1'd0))) begin
            ap_phi_reg_pp0_iter3_val_1_reg_166 <= imgOutput0_data_dout;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter3_val_1_reg_166 <= ap_phi_reg_pp0_iter2_val_1_reg_166;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            filled_fu_84 <= 10'd0;
        end else if (((icmp_ln1301_reg_448 == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
            filled_fu_84 <= filled_next_fu_292_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_96 <= 32'd0;
        end else if (((icmp_ln1301_fu_200_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            indvar_flatten_fu_96 <= add_ln1301_fu_205_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            j_fu_92 <= 16'd0;
        end else if (((icmp_ln1301_fu_200_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            j_fu_92 <= add_ln1306_fu_241_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            localbuffer_fu_88 <= 512'd0;
        end else if ((1'b1 == ap_condition_403)) begin
            localbuffer_fu_88 <= localbuffer_1_fu_350_p2;
        end else if ((1'b1 == ap_condition_400)) begin
            localbuffer_fu_88 <= localbuffer_2_fu_372_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
        bLast_reg_452 <= bLast_fu_231_p2;
        icmp_ln1301_reg_448 <= icmp_ln1301_fu_200_p2;
        icmp_ln1315_reg_457 <= icmp_ln1315_fu_236_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        icmp_ln1301_reg_448_pp0_iter2_reg <= icmp_ln1301_reg_448;
        icmp_ln1301_reg_448_pp0_iter3_reg <= icmp_ln1301_reg_448_pp0_iter2_reg;
        icmp_ln1324_reg_473 <= icmp_ln1324_fu_277_p2;
        icmp_ln1324_reg_473_pp0_iter3_reg <= icmp_ln1324_reg_473;
        sub_ln1332_1_reg_498 <= sub_ln1332_1_fu_341_p2;
        tempval_reg_483 <= tempval_fu_310_p2;
        tmp_1_reg_488 <= sub_ln1332_fu_319_p2[32'd10];
        trunc_ln1332_reg_493 <= trunc_ln1332_fu_333_p1;
        zext_ln1314_reg_477[7 : 0] <= zext_ln1314_fu_303_p1[7 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_val_1_reg_166 <= ap_phi_reg_pp0_iter0_val_1_reg_166;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        filled_1_reg_461 <= filled_fu_84;
    end
end

always @ (*) begin
    if (((icmp_ln1301_fu_200_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln1301_reg_448 == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        ap_condition_exit_pp0_iter2_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter2_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter3_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln1301_reg_448 == 1'd0)) begin
        if ((icmp_ln1324_fu_277_p2 == 1'd1)) begin
            ap_phi_mux_conv3_i12_i_i923_pn_phi_fu_160_p4 = zext_ln1313_fu_266_p1;
        end else if ((icmp_ln1324_fu_277_p2 == 1'd0)) begin
            ap_phi_mux_conv3_i12_i_i923_pn_phi_fu_160_p4 = or_ln_fu_283_p3;
        end else begin
            ap_phi_mux_conv3_i12_i_i923_pn_phi_fu_160_p4 = ap_phi_reg_pp0_iter2_conv3_i12_i_i923_pn_reg_157;
        end
    end else begin
        ap_phi_mux_conv3_i12_i_i923_pn_phi_fu_160_p4 = ap_phi_reg_pp0_iter2_conv3_i12_i_i923_pn_reg_157;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln1301_reg_448_pp0_iter2_reg == 1'd1))) begin
        filled_out_ap_vld = 1'b1;
    end else begin
        filled_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_predicate_op43_read_state3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        imgOutput0_data_blk_n = imgOutput0_data_empty_n;
    end else begin
        imgOutput0_data_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op43_read_state3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        imgOutput0_data_read = 1'b1;
    end else begin
        imgOutput0_data_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_predicate_op67_write_state5 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        ldata_blk_n = ldata_full_n;
    end else begin
        ldata_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_predicate_op67_write_state5 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        ldata_write = 1'b1;
    end else begin
        ldata_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln1301_reg_448_pp0_iter2_reg == 1'd1))) begin
        localbuffer_out_ap_vld = 1'b1;
    end else begin
        localbuffer_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln1301_fu_205_p2 = (indvar_flatten_fu_96 + 32'd1);

assign add_ln1306_fu_241_p2 = (select_ln1294_fu_219_p3 + 16'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_block_state5_pp0_stage0_iter4)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_block_state5_pp0_stage0_iter4)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_block_state5_pp0_stage0_iter4)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2)));
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter2 = ((ap_predicate_op43_read_state3 == 1'b1) & (imgOutput0_data_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state5_pp0_stage0_iter4 = ((ap_predicate_op67_write_state5 == 1'b1) & (ldata_full_n == 1'b0));
end

always @ (*) begin
    ap_condition_195 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_condition_400 = ((icmp_ln1324_reg_473_pp0_iter3_reg == 1'd0) & (icmp_ln1301_reg_448_pp0_iter3_reg == 1'd0) & (ap_enable_reg_pp0_iter4 == 1'b1));
end

always @ (*) begin
    ap_condition_403 = ((icmp_ln1324_reg_473_pp0_iter3_reg == 1'd1) & (icmp_ln1301_reg_448_pp0_iter3_reg == 1'd0) & (ap_enable_reg_pp0_iter4 == 1'b1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter1_stage0;

assign ap_phi_reg_pp0_iter0_val_1_reg_166 = 'bx;

assign ap_phi_reg_pp0_iter2_conv3_i12_i_i923_pn_reg_157 = 'bx;

always @ (*) begin
    ap_predicate_op43_read_state3 = ((icmp_ln1315_reg_457 == 1'd1) & (icmp_ln1301_reg_448 == 1'd0));
end

always @ (*) begin
    ap_predicate_op67_write_state5 = ((icmp_ln1324_reg_473_pp0_iter3_reg == 1'd0) & (icmp_ln1301_reg_448_pp0_iter3_reg == 1'd0));
end

assign bLast_fu_231_p2 = ((sub == zext_ln1306_fu_227_p1) ? 1'b1 : 1'b0);

assign filled_next_fu_292_p2 = (ap_phi_mux_conv3_i12_i_i923_pn_phi_fu_160_p4 + filled_fu_84);

assign filled_out = filled_1_reg_461;

assign icmp_ln1301_fu_200_p2 = ((indvar_flatten_fu_96 == bound) ? 1'b1 : 1'b0);

assign icmp_ln1306_fu_214_p2 = ((j_fu_92 == empty) ? 1'b1 : 1'b0);

assign icmp_ln1315_fu_236_p2 = (($signed(zext_ln1306_fu_227_p1) < $signed(cols_bound_per_npc_load)) ? 1'b1 : 1'b0);

assign icmp_ln1324_fu_277_p2 = ((sub_ln1324_fu_271_p2 > filled_fu_84) ? 1'b1 : 1'b0);

assign ldata_din = (tempval_reg_483 | localbuffer_fu_88);

assign localbuffer_1_fu_350_p2 = (tempval_reg_483 | localbuffer_fu_88);

assign localbuffer_2_fu_372_p3 = ((tmp_1_reg_488[0:0] == 1'b1) ? shl_ln1332_fu_359_p2 : lshr_ln1332_fu_367_p2);

assign localbuffer_out = localbuffer_fu_88;

assign lshr_ln1332_fu_367_p2 = zext_ln1314_reg_477 >> zext_ln1332_2_fu_364_p1;

assign or_ln_fu_283_p3 = {{6'd32}, {xf_bits_per_clock_fu_260_p3}};

assign select_ln1294_fu_219_p3 = ((icmp_ln1306_fu_214_p2[0:0] == 1'b1) ? 16'd0 : j_fu_92);

assign shl_ln1332_fu_359_p2 = zext_ln1314_reg_477 << zext_ln1332_1_fu_356_p1;

assign sub_ln1324_fu_271_p2 = ($signed(10'd512) - $signed(zext_ln1313_fu_266_p1));

assign sub_ln1332_1_fu_341_p2 = (9'd0 - trunc_ln1332_1_fu_337_p1);

assign sub_ln1332_fu_319_p2 = (11'd512 - zext_ln1332_fu_316_p1);

assign tempval_fu_310_p2 = zext_ln1314_fu_303_p1 << zext_ln1320_fu_307_p1;

assign trunc_ln1332_1_fu_337_p1 = sub_ln1332_fu_319_p2[8:0];

assign trunc_ln1332_fu_333_p1 = sub_ln1332_fu_319_p2[9:0];

assign xf_bits_per_clock_fu_260_p3 = ((bLast_reg_452[0:0] == 1'b1) ? last_blk_width_load : 4'd8);

assign zext_ln1306_fu_227_p1 = select_ln1294_fu_219_p3;

assign zext_ln1313_fu_266_p1 = xf_bits_per_clock_fu_260_p3;

assign zext_ln1314_fu_303_p1 = ap_phi_reg_pp0_iter3_val_1_reg_166;

assign zext_ln1320_fu_307_p1 = filled_1_reg_461;

assign zext_ln1332_1_fu_356_p1 = sub_ln1332_1_reg_498;

assign zext_ln1332_2_fu_364_p1 = trunc_ln1332_reg_493;

assign zext_ln1332_fu_316_p1 = filled_1_reg_461;

always @ (posedge ap_clk) begin
    zext_ln1314_reg_477[511:8] <= 504'b
end

endmodule //cvtcolor_og_MatStream2AxiStream_2_Pipeline_MMIterOutRow_MMIterOutCol
