-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity cvtcolor_og_bgr2gray_16_0_1080_1920_1_2_2_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    p_src_rows_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    p_src_rows_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    p_src_rows_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    p_src_rows_empty_n : IN STD_LOGIC;
    p_src_rows_read : OUT STD_LOGIC;
    p_src_cols_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    p_src_cols_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    p_src_cols_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    p_src_cols_empty_n : IN STD_LOGIC;
    p_src_cols_read : OUT STD_LOGIC;
    imgInput0_data_dout : IN STD_LOGIC_VECTOR (23 downto 0);
    imgInput0_data_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    imgInput0_data_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    imgInput0_data_empty_n : IN STD_LOGIC;
    imgInput0_data_read : OUT STD_LOGIC;
    imgOutput0_data_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    imgOutput0_data_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    imgOutput0_data_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    imgOutput0_data_full_n : IN STD_LOGIC;
    imgOutput0_data_write : OUT STD_LOGIC );
end;


architecture behav of cvtcolor_og_bgr2gray_16_0_1080_1920_1_2_2_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal p_src_rows_blk_n : STD_LOGIC;
    signal p_src_cols_blk_n : STD_LOGIC;
    signal empty_fu_73_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal empty_reg_112 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal empty_46_fu_77_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal empty_46_reg_117 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_bgr2gray_16_0_1080_1920_1_2_2_Pipeline_columnloop_fu_64_ap_start : STD_LOGIC;
    signal grp_bgr2gray_16_0_1080_1920_1_2_2_Pipeline_columnloop_fu_64_ap_done : STD_LOGIC;
    signal grp_bgr2gray_16_0_1080_1920_1_2_2_Pipeline_columnloop_fu_64_ap_idle : STD_LOGIC;
    signal grp_bgr2gray_16_0_1080_1920_1_2_2_Pipeline_columnloop_fu_64_ap_ready : STD_LOGIC;
    signal grp_bgr2gray_16_0_1080_1920_1_2_2_Pipeline_columnloop_fu_64_imgInput0_data_read : STD_LOGIC;
    signal grp_bgr2gray_16_0_1080_1920_1_2_2_Pipeline_columnloop_fu_64_imgOutput0_data_din : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_bgr2gray_16_0_1080_1920_1_2_2_Pipeline_columnloop_fu_64_imgOutput0_data_write : STD_LOGIC;
    signal grp_bgr2gray_16_0_1080_1920_1_2_2_Pipeline_columnloop_fu_64_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln5576_fu_89_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal i_fu_48 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal add_ln5576_fu_94_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component cvtcolor_og_bgr2gray_16_0_1080_1920_1_2_2_Pipeline_columnloop IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        imgInput0_data_dout : IN STD_LOGIC_VECTOR (23 downto 0);
        imgInput0_data_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
        imgInput0_data_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
        imgInput0_data_empty_n : IN STD_LOGIC;
        imgInput0_data_read : OUT STD_LOGIC;
        imgOutput0_data_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        imgOutput0_data_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
        imgOutput0_data_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
        imgOutput0_data_full_n : IN STD_LOGIC;
        imgOutput0_data_write : OUT STD_LOGIC;
        empty : IN STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    grp_bgr2gray_16_0_1080_1920_1_2_2_Pipeline_columnloop_fu_64 : component cvtcolor_og_bgr2gray_16_0_1080_1920_1_2_2_Pipeline_columnloop
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_bgr2gray_16_0_1080_1920_1_2_2_Pipeline_columnloop_fu_64_ap_start,
        ap_done => grp_bgr2gray_16_0_1080_1920_1_2_2_Pipeline_columnloop_fu_64_ap_done,
        ap_idle => grp_bgr2gray_16_0_1080_1920_1_2_2_Pipeline_columnloop_fu_64_ap_idle,
        ap_ready => grp_bgr2gray_16_0_1080_1920_1_2_2_Pipeline_columnloop_fu_64_ap_ready,
        imgInput0_data_dout => imgInput0_data_dout,
        imgInput0_data_num_data_valid => ap_const_lv3_0,
        imgInput0_data_fifo_cap => ap_const_lv3_0,
        imgInput0_data_empty_n => imgInput0_data_empty_n,
        imgInput0_data_read => grp_bgr2gray_16_0_1080_1920_1_2_2_Pipeline_columnloop_fu_64_imgInput0_data_read,
        imgOutput0_data_din => grp_bgr2gray_16_0_1080_1920_1_2_2_Pipeline_columnloop_fu_64_imgOutput0_data_din,
        imgOutput0_data_num_data_valid => ap_const_lv3_0,
        imgOutput0_data_fifo_cap => ap_const_lv3_0,
        imgOutput0_data_full_n => imgOutput0_data_full_n,
        imgOutput0_data_write => grp_bgr2gray_16_0_1080_1920_1_2_2_Pipeline_columnloop_fu_64_imgOutput0_data_write,
        empty => empty_reg_112);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((icmp_ln5576_fu_89_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    grp_bgr2gray_16_0_1080_1920_1_2_2_Pipeline_columnloop_fu_64_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_bgr2gray_16_0_1080_1920_1_2_2_Pipeline_columnloop_fu_64_ap_start_reg <= ap_const_logic_0;
            else
                if (((icmp_ln5576_fu_89_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    grp_bgr2gray_16_0_1080_1920_1_2_2_Pipeline_columnloop_fu_64_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_bgr2gray_16_0_1080_1920_1_2_2_Pipeline_columnloop_fu_64_ap_ready = ap_const_logic_1)) then 
                    grp_bgr2gray_16_0_1080_1920_1_2_2_Pipeline_columnloop_fu_64_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_fu_48_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_fu_48 <= ap_const_lv16_0;
            elsif (((icmp_ln5576_fu_89_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_fu_48 <= add_ln5576_fu_94_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                empty_46_reg_117 <= empty_46_fu_77_p1;
                empty_reg_112 <= empty_fu_73_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state1, ap_block_state1, grp_bgr2gray_16_0_1080_1920_1_2_2_Pipeline_columnloop_fu_64_ap_done, ap_CS_fsm_state2, icmp_ln5576_fu_89_p2, ap_CS_fsm_state3)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln5576_fu_89_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((grp_bgr2gray_16_0_1080_1920_1_2_2_Pipeline_columnloop_fu_64_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    add_ln5576_fu_94_p2 <= std_logic_vector(unsigned(i_fu_48) + unsigned(ap_const_lv16_1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_block_state1)
    begin
        if ((ap_const_boolean_1 = ap_block_state1)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;

    ap_ST_fsm_state3_blk_assign_proc : process(grp_bgr2gray_16_0_1080_1920_1_2_2_Pipeline_columnloop_fu_64_ap_done)
    begin
        if ((grp_bgr2gray_16_0_1080_1920_1_2_2_Pipeline_columnloop_fu_64_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state3_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state3_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, p_src_rows_empty_n, p_src_cols_empty_n)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (p_src_cols_empty_n = ap_const_logic_0) or (p_src_rows_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state2, icmp_ln5576_fu_89_p2)
    begin
        if (((icmp_ln5576_fu_89_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln5576_fu_89_p2)
    begin
        if (((icmp_ln5576_fu_89_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    empty_46_fu_77_p1 <= p_src_rows_dout(16 - 1 downto 0);
    empty_fu_73_p1 <= p_src_cols_dout(16 - 1 downto 0);
    grp_bgr2gray_16_0_1080_1920_1_2_2_Pipeline_columnloop_fu_64_ap_start <= grp_bgr2gray_16_0_1080_1920_1_2_2_Pipeline_columnloop_fu_64_ap_start_reg;
    icmp_ln5576_fu_89_p2 <= "1" when (i_fu_48 = empty_46_reg_117) else "0";

    imgInput0_data_read_assign_proc : process(grp_bgr2gray_16_0_1080_1920_1_2_2_Pipeline_columnloop_fu_64_imgInput0_data_read, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            imgInput0_data_read <= grp_bgr2gray_16_0_1080_1920_1_2_2_Pipeline_columnloop_fu_64_imgInput0_data_read;
        else 
            imgInput0_data_read <= ap_const_logic_0;
        end if; 
    end process;

    imgOutput0_data_din <= grp_bgr2gray_16_0_1080_1920_1_2_2_Pipeline_columnloop_fu_64_imgOutput0_data_din;

    imgOutput0_data_write_assign_proc : process(grp_bgr2gray_16_0_1080_1920_1_2_2_Pipeline_columnloop_fu_64_imgOutput0_data_write, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            imgOutput0_data_write <= grp_bgr2gray_16_0_1080_1920_1_2_2_Pipeline_columnloop_fu_64_imgOutput0_data_write;
        else 
            imgOutput0_data_write <= ap_const_logic_0;
        end if; 
    end process;


    p_src_cols_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, p_src_cols_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_src_cols_blk_n <= p_src_cols_empty_n;
        else 
            p_src_cols_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    p_src_cols_read_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_src_cols_read <= ap_const_logic_1;
        else 
            p_src_cols_read <= ap_const_logic_0;
        end if; 
    end process;


    p_src_rows_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, p_src_rows_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_src_rows_blk_n <= p_src_rows_empty_n;
        else 
            p_src_rows_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    p_src_rows_read_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_src_rows_read <= ap_const_logic_1;
        else 
            p_src_rows_read <= ap_const_logic_0;
        end if; 
    end process;

end behav;
