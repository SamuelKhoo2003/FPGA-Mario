-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity cvtcolor_og_AxiStream2MatStream_2_Pipeline_MMIterInLoopRow is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ldata_dout : IN STD_LOGIC_VECTOR (511 downto 0);
    ldata_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    ldata_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    ldata_empty_n : IN STD_LOGIC;
    ldata_read : OUT STD_LOGIC;
    imgInput0_data_din : OUT STD_LOGIC_VECTOR (23 downto 0);
    imgInput0_data_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    imgInput0_data_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    imgInput0_data_full_n : IN STD_LOGIC;
    imgInput0_data_write : OUT STD_LOGIC;
    bound : IN STD_LOGIC_VECTOR (31 downto 0);
    last_blk_width_cast2_cast_cast : IN STD_LOGIC_VECTOR (3 downto 0);
    cols_bound_per_npc_load : IN STD_LOGIC_VECTOR (31 downto 0);
    sub : IN STD_LOGIC_VECTOR (31 downto 0);
    last_blk_width_load : IN STD_LOGIC_VECTOR (3 downto 0);
    sub3 : IN STD_LOGIC_VECTOR (9 downto 0);
    last_blk_width_cast2_cast_cast_cast : IN STD_LOGIC_VECTOR (3 downto 0) );
end;


architecture behav of cvtcolor_og_AxiStream2MatStream_2_Pipeline_MMIterInLoopRow is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv512_lc_1 : STD_LOGIC_VECTOR (511 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv10_1E8 : STD_LOGIC_VECTOR (9 downto 0) := "0111101000";
    constant ap_const_lv10_1FF : STD_LOGIC_VECTOR (9 downto 0) := "0111111111";
    constant ap_const_lv10_217 : STD_LOGIC_VECTOR (9 downto 0) := "1000010111";
    constant ap_const_lv32_200 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001000000000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv6_3F : STD_LOGIC_VECTOR (5 downto 0) := "111111";
    constant ap_const_lv32_1FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111111111";
    constant ap_const_lv9_1FF : STD_LOGIC_VECTOR (8 downto 0) := "111111111";
    constant ap_const_lv512_lc_2 : STD_LOGIC_VECTOR (511 downto 0) := "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv5_17 : STD_LOGIC_VECTOR (4 downto 0) := "10111";
    constant ap_const_lv5_18 : STD_LOGIC_VECTOR (4 downto 0) := "11000";
    constant ap_const_lv24_FFFFFF : STD_LOGIC_VECTOR (23 downto 0) := "111111111111111111111111";
    constant ap_const_lv24_0 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal icmp_ln1054_reg_777 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1054_reg_777_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1065_reg_793 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_predicate_op89_read_state4 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal icmp_ln1084_reg_789 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1084_reg_789_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln1054_fu_216_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ldata_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal imgInput0_data_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal last_blk_width_cast2_cast_cast_cast_cast_cast_fu_178_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal last_blk_width_cast2_cast_cast_cast_cast_cast_reg_767 : STD_LOGIC_VECTOR (9 downto 0);
    signal last_blk_width_cast2_cast_cast_cast8_fu_182_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal last_blk_width_cast2_cast_cast_cast8_reg_772 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln1054_reg_777_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1054_reg_777_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal bLast_width_fu_227_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bLast_width_reg_781 : STD_LOGIC_VECTOR (0 downto 0);
    signal bLast_width_reg_781_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal bLast_width_reg_781_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal bLast_width_reg_781_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1084_fu_232_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1084_reg_789_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1084_reg_789_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1065_fu_292_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1065_reg_793_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1065_reg_793_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1074_fu_326_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1074_reg_797 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1074_reg_797_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln1074_fu_332_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln1074_reg_804 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln1074_1_fu_336_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln1074_1_reg_812 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln1066_fu_351_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1066_reg_818 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1066_reg_818_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln1067_1_fu_361_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln1067_1_reg_823 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln1067_1_reg_823_pp0_iter3_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln1067_fu_365_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln1067_reg_832 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln1071_fu_385_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln1071_reg_837 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln1071_fu_391_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1071_reg_842 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1071_reg_842_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln1071_1_fu_397_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln1071_1_reg_850 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln1071_1_reg_850_pp0_iter3_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln1074_2_fu_425_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln1074_2_reg_856 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln1074_3_fu_434_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln1074_3_reg_861 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln1074_2_fu_461_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal trunc_ln1074_2_reg_866 : STD_LOGIC_VECTOR (23 downto 0);
    signal zext_ln1067_fu_465_p1 : STD_LOGIC_VECTOR (511 downto 0);
    signal zext_ln1067_reg_871 : STD_LOGIC_VECTOR (511 downto 0);
    signal lshr_ln1067_fu_468_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal lshr_ln1067_reg_876 : STD_LOGIC_VECTOR (511 downto 0);
    signal val_2_reg_881 : STD_LOGIC_VECTOR (511 downto 0);
    signal lshr_ln1071_fu_483_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal lshr_ln1071_reg_886 : STD_LOGIC_VECTOR (511 downto 0);
    signal sub_ln1071_2_fu_494_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln1071_2_reg_891 : STD_LOGIC_VECTOR (4 downto 0);
    signal localbuffer_5_fu_530_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal localbuffer_4_fu_679_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal localbuffer_4_reg_901 : STD_LOGIC_VECTOR (23 downto 0);
    signal lshr_ln1082_fu_694_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal lshr_ln1082_reg_906 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_condition_exit_pp0_iter2_stage0 : STD_LOGIC;
    signal ap_phi_mux_localbuffer_1_phi_fu_168_p4 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_phi_reg_pp0_iter5_localbuffer_1_reg_165 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_phi_reg_pp0_iter0_localbuffer_1_reg_165 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_phi_reg_pp0_iter1_localbuffer_1_reg_165 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_phi_reg_pp0_iter2_localbuffer_1_reg_165 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_phi_reg_pp0_iter3_localbuffer_1_reg_165 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_phi_reg_pp0_iter4_localbuffer_1_reg_165 : STD_LOGIC_VECTOR (23 downto 0);
    signal rem_fu_94 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal rem_3_fu_340_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal rem_2_fu_401_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal i_fu_98 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    signal add_ln1054_fu_221_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal j_fu_102 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal j_3_fu_243_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal val_fu_106 : STD_LOGIC_VECTOR (511 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal last_blk_width_cast2_cast_cast_cast_cast_fu_174_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln1054_fu_212_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln1086_fu_237_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xf_bits_per_clock_fu_264_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal sext_ln1060_fu_270_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal ptr_width_minus_fu_282_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln1060_fu_274_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln1074_fu_298_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln1074_fu_303_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln1074_fu_310_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln1074_1_fu_320_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln1074_fu_314_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln1067_fu_357_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln1060_1_fu_278_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln1071_fu_371_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal sext_ln1071_1_fu_381_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln1071_fu_377_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln1061_fu_288_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_fu_415_p4 : STD_LOGIC_VECTOR (511 downto 0);
    signal xor_ln1074_fu_429_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln1074_3_fu_445_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln1074_2_fu_438_p3 : STD_LOGIC_VECTOR (511 downto 0);
    signal zext_ln1074_1_fu_451_p1 : STD_LOGIC_VECTOR (511 downto 0);
    signal lshr_ln1074_fu_455_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal xor_ln1071_fu_474_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln1071_fu_479_p1 : STD_LOGIC_VECTOR (511 downto 0);
    signal select_ln1071_fu_489_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln1074_1_fu_505_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal xor_ln1074_1_fu_510_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln1074_2_fu_516_p1 : STD_LOGIC_VECTOR (511 downto 0);
    signal lshr_ln1074_1_fu_520_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal trunc_ln1074_3_fu_526_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal lshr_ln1067_1_fu_538_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal trunc_ln1067_2_fu_535_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal trunc_ln1067_3_fu_543_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sub_ln1067_1_fu_553_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln1067_1_fu_558_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal and_ln1067_fu_547_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal lshr_ln1067_2_fu_562_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal localbuffer_fu_568_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal trunc_ln1049_fu_581_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal trunc_ln1071_fu_584_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sub_ln1071_1_fu_593_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln1071_2_fu_603_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln1071_1_fu_598_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal and_ln1071_fu_587_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal zext_ln1071_1_fu_609_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal shl_ln1071_fu_620_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_fu_626_p4 : STD_LOGIC_VECTOR (23 downto 0);
    signal zext_ln1071_2_fu_613_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal zext_ln1071_3_fu_617_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal shl_ln1071_1_fu_643_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal lshr_ln1071_1_fu_649_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal and_ln1071_1_fu_655_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal localbuffer_3_fu_574_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal xor_ln1071_1_fu_661_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal select_ln1071_3_fu_636_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal and_ln1071_2_fu_667_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal and_ln1071_3_fu_673_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal sub_ln1082_fu_685_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln1082_fu_690_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal select_ln1059_fu_700_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_condition_682 : BOOLEAN;
    signal ap_condition_685 : BOOLEAN;
    signal ap_condition_688 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component cvtcolor_og_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component cvtcolor_og_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter1_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter4_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter2_stage0)) then 
                    ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_phi_reg_pp0_iter5_localbuffer_1_reg_165_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then
                if (((icmp_ln1065_reg_793_pp0_iter3_reg = ap_const_lv1_0) and (icmp_ln1054_reg_777_pp0_iter3_reg = ap_const_lv1_1))) then 
                    ap_phi_reg_pp0_iter5_localbuffer_1_reg_165 <= localbuffer_5_fu_530_p2;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter5_localbuffer_1_reg_165 <= ap_phi_reg_pp0_iter4_localbuffer_1_reg_165;
                end if;
            end if; 
        end if;
    end process;

    i_fu_98_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_98 <= ap_const_lv31_0;
                elsif (((icmp_ln1054_fu_216_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    i_fu_98 <= add_ln1054_fu_221_p2;
                end if;
            end if; 
        end if;
    end process;

    j_fu_102_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    j_fu_102 <= ap_const_lv32_0;
                elsif (((icmp_ln1054_fu_216_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    j_fu_102 <= j_3_fu_243_p3;
                end if;
            end if; 
        end if;
    end process;

    rem_fu_94_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    rem_fu_94 <= ap_const_lv32_0;
                elsif ((ap_const_boolean_1 = ap_condition_685)) then 
                    rem_fu_94 <= rem_2_fu_401_p2;
                elsif ((ap_const_boolean_1 = ap_condition_682)) then 
                    rem_fu_94 <= rem_3_fu_340_p2;
                end if;
            end if; 
        end if;
    end process;

    val_fu_106_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    val_fu_106 <= ap_const_lv512_lc_1;
                elsif ((ap_const_boolean_1 = ap_condition_688)) then 
                    val_fu_106 <= ldata_dout;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
                bLast_width_reg_781 <= bLast_width_fu_227_p2;
                icmp_ln1054_reg_777 <= icmp_ln1054_fu_216_p2;
                icmp_ln1084_reg_789 <= icmp_ln1084_fu_232_p2;
                last_blk_width_cast2_cast_cast_cast8_reg_772 <= last_blk_width_cast2_cast_cast_cast8_fu_182_p1;
                    last_blk_width_cast2_cast_cast_cast_cast_cast_reg_767(4 downto 0) <= last_blk_width_cast2_cast_cast_cast_cast_cast_fu_178_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                bLast_width_reg_781_pp0_iter2_reg <= bLast_width_reg_781;
                bLast_width_reg_781_pp0_iter3_reg <= bLast_width_reg_781_pp0_iter2_reg;
                bLast_width_reg_781_pp0_iter4_reg <= bLast_width_reg_781_pp0_iter3_reg;
                icmp_ln1054_reg_777_pp0_iter2_reg <= icmp_ln1054_reg_777;
                icmp_ln1054_reg_777_pp0_iter3_reg <= icmp_ln1054_reg_777_pp0_iter2_reg;
                icmp_ln1054_reg_777_pp0_iter4_reg <= icmp_ln1054_reg_777_pp0_iter3_reg;
                icmp_ln1065_reg_793 <= icmp_ln1065_fu_292_p2;
                icmp_ln1065_reg_793_pp0_iter3_reg <= icmp_ln1065_reg_793;
                icmp_ln1065_reg_793_pp0_iter4_reg <= icmp_ln1065_reg_793_pp0_iter3_reg;
                icmp_ln1066_reg_818 <= icmp_ln1066_fu_351_p2;
                icmp_ln1066_reg_818_pp0_iter3_reg <= icmp_ln1066_reg_818;
                icmp_ln1071_reg_842 <= icmp_ln1071_fu_391_p2;
                icmp_ln1071_reg_842_pp0_iter3_reg <= icmp_ln1071_reg_842;
                icmp_ln1074_reg_797 <= icmp_ln1074_fu_326_p2;
                icmp_ln1074_reg_797_pp0_iter3_reg <= icmp_ln1074_reg_797;
                icmp_ln1084_reg_789_pp0_iter2_reg <= icmp_ln1084_reg_789;
                icmp_ln1084_reg_789_pp0_iter3_reg <= icmp_ln1084_reg_789_pp0_iter2_reg;
                icmp_ln1084_reg_789_pp0_iter4_reg <= icmp_ln1084_reg_789_pp0_iter3_reg;
                localbuffer_4_reg_901 <= localbuffer_4_fu_679_p2;
                lshr_ln1067_reg_876 <= lshr_ln1067_fu_468_p2;
                lshr_ln1071_reg_886 <= lshr_ln1071_fu_483_p2;
                lshr_ln1082_reg_906 <= lshr_ln1082_fu_694_p2;
                sub_ln1067_reg_832 <= sub_ln1067_fu_365_p2;
                sub_ln1071_2_reg_891 <= sub_ln1071_2_fu_494_p2;
                sub_ln1071_reg_837 <= sub_ln1071_fu_385_p2;
                sub_ln1074_2_reg_856 <= sub_ln1074_2_fu_425_p2;
                sub_ln1074_3_reg_861 <= sub_ln1074_3_fu_434_p2;
                trunc_ln1067_1_reg_823 <= trunc_ln1067_1_fu_361_p1;
                trunc_ln1067_1_reg_823_pp0_iter3_reg <= trunc_ln1067_1_reg_823;
                trunc_ln1071_1_reg_850 <= trunc_ln1071_1_fu_397_p1;
                trunc_ln1071_1_reg_850_pp0_iter3_reg <= trunc_ln1071_1_reg_850;
                trunc_ln1074_1_reg_812 <= trunc_ln1074_1_fu_336_p1;
                trunc_ln1074_2_reg_866 <= trunc_ln1074_2_fu_461_p1;
                trunc_ln1074_reg_804 <= trunc_ln1074_fu_332_p1;
                val_2_reg_881 <= ldata_dout;
                    zext_ln1067_reg_871(8 downto 0) <= zext_ln1067_fu_465_p1(8 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_phi_reg_pp0_iter1_localbuffer_1_reg_165 <= ap_phi_reg_pp0_iter0_localbuffer_1_reg_165;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_phi_reg_pp0_iter2_localbuffer_1_reg_165 <= ap_phi_reg_pp0_iter1_localbuffer_1_reg_165;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then
                ap_phi_reg_pp0_iter3_localbuffer_1_reg_165 <= ap_phi_reg_pp0_iter2_localbuffer_1_reg_165;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then
                ap_phi_reg_pp0_iter4_localbuffer_1_reg_165 <= ap_phi_reg_pp0_iter3_localbuffer_1_reg_165;
            end if;
        end if;
    end process;
    last_blk_width_cast2_cast_cast_cast_cast_cast_reg_767(9 downto 5) <= "00000";
    zext_ln1067_reg_871(511 downto

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln1054_fu_221_p2 <= std_logic_vector(unsigned(i_fu_98) + unsigned(ap_const_lv31_1));
    add_ln1071_fu_371_p2 <= std_logic_vector(unsigned(zext_ln1060_1_fu_278_p1) + unsigned(ap_const_lv6_3F));
    add_ln1074_fu_298_p2 <= std_logic_vector(unsigned(last_blk_width_cast2_cast_cast_cast_cast_cast_reg_767) + unsigned(ap_const_lv10_1FF));
    add_ln1086_fu_237_p2 <= std_logic_vector(unsigned(j_fu_102) + unsigned(ap_const_lv32_1));
    and_ln1067_fu_547_p2 <= (trunc_ln1067_3_fu_543_p1 and trunc_ln1067_2_fu_535_p1);
    and_ln1071_1_fu_655_p2 <= (shl_ln1071_1_fu_643_p2 and lshr_ln1071_1_fu_649_p2);
    and_ln1071_2_fu_667_p2 <= (xor_ln1071_1_fu_661_p2 and localbuffer_3_fu_574_p3);
    and_ln1071_3_fu_673_p2 <= (select_ln1071_3_fu_636_p3 and and_ln1071_1_fu_655_p2);
    and_ln1071_fu_587_p2 <= (trunc_ln1071_fu_584_p1 and trunc_ln1049_fu_581_p1);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter5, ap_block_state4_pp0_stage0_iter3, ap_block_state6_pp0_stage0_iter5)
    begin
                ap_block_pp0_stage0_01001 <= (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state6_pp0_stage0_iter5)) or ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state4_pp0_stage0_iter3)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter5, ap_block_state4_pp0_stage0_iter3, ap_block_state6_pp0_stage0_iter5)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state6_pp0_stage0_iter5)) or ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state4_pp0_stage0_iter3)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter5, ap_block_state4_pp0_stage0_iter3, ap_block_state6_pp0_stage0_iter5)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state6_pp0_stage0_iter5)) or ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state4_pp0_stage0_iter3)));
    end process;


    ap_block_state4_pp0_stage0_iter3_assign_proc : process(ldata_empty_n, ap_predicate_op89_read_state4)
    begin
                ap_block_state4_pp0_stage0_iter3 <= ((ap_predicate_op89_read_state4 = ap_const_boolean_1) and (ldata_empty_n = ap_const_logic_0));
    end process;


    ap_block_state6_pp0_stage0_iter5_assign_proc : process(imgInput0_data_full_n, icmp_ln1084_reg_789_pp0_iter4_reg)
    begin
                ap_block_state6_pp0_stage0_iter5 <= ((icmp_ln1084_reg_789_pp0_iter4_reg = ap_const_lv1_1) and (imgInput0_data_full_n = ap_const_logic_0));
    end process;


    ap_condition_682_assign_proc : process(ap_enable_reg_pp0_iter2, icmp_ln1054_reg_777, icmp_ln1065_fu_292_p2)
    begin
                ap_condition_682 <= ((icmp_ln1054_reg_777 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln1065_fu_292_p2 = ap_const_lv1_0));
    end process;


    ap_condition_685_assign_proc : process(ap_enable_reg_pp0_iter2, icmp_ln1054_reg_777, icmp_ln1065_fu_292_p2)
    begin
                ap_condition_685 <= ((icmp_ln1054_reg_777 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln1065_fu_292_p2 = ap_const_lv1_1));
    end process;


    ap_condition_688_assign_proc : process(ap_enable_reg_pp0_iter3, icmp_ln1054_reg_777_pp0_iter2_reg, icmp_ln1065_reg_793)
    begin
                ap_condition_688 <= ((icmp_ln1065_reg_793 = ap_const_lv1_1) and (icmp_ln1054_reg_777_pp0_iter2_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1));
    end process;


    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, icmp_ln1054_fu_216_p2)
    begin
        if (((icmp_ln1054_fu_216_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_exit_pp0_iter2_stage0_assign_proc : process(ap_enable_reg_pp0_iter2, icmp_ln1054_reg_777, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln1054_reg_777 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            ap_condition_exit_pp0_iter2_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter2_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter4_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter4_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5)
    begin
        if (((ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter1_stage0;

    ap_phi_mux_localbuffer_1_phi_fu_168_p4_assign_proc : process(icmp_ln1054_reg_777_pp0_iter4_reg, icmp_ln1065_reg_793_pp0_iter4_reg, localbuffer_4_reg_901, ap_phi_reg_pp0_iter5_localbuffer_1_reg_165)
    begin
        if (((icmp_ln1065_reg_793_pp0_iter4_reg = ap_const_lv1_1) and (icmp_ln1054_reg_777_pp0_iter4_reg = ap_const_lv1_1))) then 
            ap_phi_mux_localbuffer_1_phi_fu_168_p4 <= localbuffer_4_reg_901;
        else 
            ap_phi_mux_localbuffer_1_phi_fu_168_p4 <= ap_phi_reg_pp0_iter5_localbuffer_1_reg_165;
        end if; 
    end process;

    ap_phi_reg_pp0_iter0_localbuffer_1_reg_165 <= "XXXXXXXXXXXXXXXXXXXXXXXX";

    ap_predicate_op89_read_state4_assign_proc : process(icmp_ln1054_reg_777_pp0_iter2_reg, icmp_ln1065_reg_793)
    begin
                ap_predicate_op89_read_state4 <= ((icmp_ln1065_reg_793 = ap_const_lv1_1) and (icmp_ln1054_reg_777_pp0_iter2_reg = ap_const_lv1_1));
    end process;


    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;

    bLast_width_fu_227_p2 <= "1" when (j_fu_102 = sub) else "0";
    icmp_ln1054_fu_216_p2 <= "1" when (signed(zext_ln1054_fu_212_p1) < signed(bound)) else "0";
    icmp_ln1065_fu_292_p2 <= "1" when (signed(rem_fu_94) < signed(zext_ln1060_fu_274_p1)) else "0";
    icmp_ln1066_fu_351_p2 <= "1" when (rem_fu_94 = ap_const_lv32_0) else "0";
    icmp_ln1071_fu_391_p2 <= "1" when (unsigned(rem_fu_94) > unsigned(sext_ln1071_fu_377_p1)) else "0";
    icmp_ln1074_fu_326_p2 <= "1" when (unsigned(sub_ln1074_1_fu_320_p2) > unsigned(sub_ln1074_fu_314_p2)) else "0";
    icmp_ln1084_fu_232_p2 <= "1" when (signed(j_fu_102) < signed(cols_bound_per_npc_load)) else "0";

    imgInput0_data_blk_n_assign_proc : process(ap_enable_reg_pp0_iter5, imgInput0_data_full_n, icmp_ln1084_reg_789_pp0_iter4_reg, ap_block_pp0_stage0)
    begin
        if (((icmp_ln1084_reg_789_pp0_iter4_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            imgInput0_data_blk_n <= imgInput0_data_full_n;
        else 
            imgInput0_data_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    imgInput0_data_din <= (select_ln1059_fu_700_p3 and ap_phi_mux_localbuffer_1_phi_fu_168_p4);

    imgInput0_data_write_assign_proc : process(ap_enable_reg_pp0_iter5, icmp_ln1084_reg_789_pp0_iter4_reg, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln1084_reg_789_pp0_iter4_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            imgInput0_data_write <= ap_const_logic_1;
        else 
            imgInput0_data_write <= ap_const_logic_0;
        end if; 
    end process;

    j_3_fu_243_p3 <= 
        ap_const_lv32_0 when (bLast_width_fu_227_p2(0) = '1') else 
        add_ln1086_fu_237_p2;
        last_blk_width_cast2_cast_cast_cast8_fu_182_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(last_blk_width_cast2_cast_cast),5));

    last_blk_width_cast2_cast_cast_cast_cast_cast_fu_178_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(last_blk_width_cast2_cast_cast_cast_cast_fu_174_p1),10));
        last_blk_width_cast2_cast_cast_cast_cast_fu_174_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(last_blk_width_cast2_cast_cast_cast),5));


    ldata_blk_n_assign_proc : process(ap_enable_reg_pp0_iter3, ldata_empty_n, ap_predicate_op89_read_state4, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_predicate_op89_read_state4 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            ldata_blk_n <= ldata_empty_n;
        else 
            ldata_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    ldata_read_assign_proc : process(ap_enable_reg_pp0_iter3, ap_predicate_op89_read_state4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_predicate_op89_read_state4 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            ldata_read <= ap_const_logic_1;
        else 
            ldata_read <= ap_const_logic_0;
        end if; 
    end process;

    localbuffer_3_fu_574_p3 <= 
        ap_const_lv24_0 when (icmp_ln1066_reg_818_pp0_iter3_reg(0) = '1') else 
        localbuffer_fu_568_p2;
    localbuffer_4_fu_679_p2 <= (and_ln1071_3_fu_673_p2 or and_ln1071_2_fu_667_p2);
    localbuffer_5_fu_530_p2 <= (trunc_ln1074_3_fu_526_p1 and trunc_ln1074_2_reg_866);
    localbuffer_fu_568_p2 <= (lshr_ln1067_2_fu_562_p2 and and_ln1067_fu_547_p2);
    lshr_ln1067_1_fu_538_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv512_lc_2),to_integer(unsigned('0' & zext_ln1067_reg_871(31-1 downto 0)))));
    lshr_ln1067_2_fu_562_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv24_FFFFFF),to_integer(unsigned('0' & zext_ln1067_1_fu_558_p1(24-1 downto 0)))));
    lshr_ln1067_fu_468_p2 <= std_logic_vector(shift_right(unsigned(val_fu_106),to_integer(unsigned('0' & zext_ln1067_fu_465_p1(31-1 downto 0)))));
    lshr_ln1071_1_fu_649_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv24_FFFFFF),to_integer(unsigned('0' & zext_ln1071_3_fu_617_p1(24-1 downto 0)))));
    lshr_ln1071_fu_483_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv512_lc_2),to_integer(unsigned('0' & zext_ln1071_fu_479_p1(31-1 downto 0)))));
    lshr_ln1074_1_fu_520_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv512_lc_2),to_integer(unsigned('0' & zext_ln1074_2_fu_516_p1(31-1 downto 0)))));
    lshr_ln1074_fu_455_p2 <= std_logic_vector(shift_right(unsigned(select_ln1074_2_fu_438_p3),to_integer(unsigned('0' & zext_ln1074_1_fu_451_p1(31-1 downto 0)))));
    lshr_ln1082_fu_694_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv24_FFFFFF),to_integer(unsigned('0' & zext_ln1082_fu_690_p1(24-1 downto 0)))));
    ptr_width_minus_fu_282_p3 <= 
        sub3 when (bLast_width_reg_781(0) = '1') else 
        ap_const_lv10_1E8;
    rem_2_fu_401_p2 <= std_logic_vector(unsigned(rem_fu_94) + unsigned(zext_ln1061_fu_288_p1));
    rem_3_fu_340_p2 <= std_logic_vector(unsigned(rem_fu_94) - unsigned(zext_ln1060_fu_274_p1));
    select_ln1059_fu_700_p3 <= 
        lshr_ln1082_reg_906 when (bLast_width_reg_781_pp0_iter4_reg(0) = '1') else 
        ap_const_lv24_FFFFFF;
    select_ln1071_1_fu_598_p3 <= 
        trunc_ln1071_1_reg_850_pp0_iter3_reg when (icmp_ln1071_reg_842_pp0_iter3_reg(0) = '1') else 
        trunc_ln1067_1_reg_823_pp0_iter3_reg;
    select_ln1071_2_fu_603_p3 <= 
        sub_ln1071_1_fu_593_p2 when (icmp_ln1071_reg_842_pp0_iter3_reg(0) = '1') else 
        trunc_ln1067_1_reg_823_pp0_iter3_reg;
    select_ln1071_3_fu_636_p3 <= 
        tmp_fu_626_p4 when (icmp_ln1071_reg_842_pp0_iter3_reg(0) = '1') else 
        shl_ln1071_fu_620_p2;
    select_ln1071_fu_489_p3 <= 
        trunc_ln1067_1_reg_823 when (icmp_ln1071_reg_842(0) = '1') else 
        trunc_ln1071_1_reg_850;
    select_ln1074_1_fu_505_p3 <= 
        sub_ln1074_2_reg_856 when (icmp_ln1074_reg_797_pp0_iter3_reg(0) = '1') else 
        sub_ln1074_3_reg_861;
    select_ln1074_2_fu_438_p3 <= 
        tmp_2_fu_415_p4 when (icmp_ln1074_reg_797(0) = '1') else 
        val_fu_106;
    select_ln1074_3_fu_445_p3 <= 
        xor_ln1074_fu_429_p2 when (icmp_ln1074_reg_797(0) = '1') else 
        trunc_ln1074_reg_804;
    select_ln1074_fu_303_p3 <= 
        add_ln1074_fu_298_p2 when (bLast_width_reg_781(0) = '1') else 
        ap_const_lv10_217;
        sext_ln1060_fu_270_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(xf_bits_per_clock_fu_264_p3),5));

        sext_ln1071_1_fu_381_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln1071_fu_371_p2),9));

        sext_ln1071_fu_377_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln1071_fu_371_p2),32));

    shl_ln1071_1_fu_643_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv24_FFFFFF),to_integer(unsigned('0' & zext_ln1071_2_fu_613_p1(24-1 downto 0)))));
    shl_ln1071_fu_620_p2 <= std_logic_vector(shift_left(unsigned(and_ln1071_fu_587_p2),to_integer(unsigned('0' & zext_ln1071_1_fu_609_p1(24-1 downto 0)))));
    sub_ln1067_1_fu_553_p2 <= std_logic_vector(signed(ap_const_lv5_18) - signed(trunc_ln1067_1_reg_823_pp0_iter3_reg));
    sub_ln1067_fu_365_p2 <= std_logic_vector(unsigned(ap_const_lv9_0) - unsigned(trunc_ln1067_fu_357_p1));
    sub_ln1071_1_fu_593_p2 <= std_logic_vector(signed(ap_const_lv5_17) - signed(trunc_ln1067_1_reg_823_pp0_iter3_reg));
    sub_ln1071_2_fu_494_p2 <= std_logic_vector(signed(ap_const_lv5_17) - signed(select_ln1071_fu_489_p3));
    sub_ln1071_fu_385_p2 <= std_logic_vector(signed(sext_ln1071_1_fu_381_p1) - signed(trunc_ln1067_fu_357_p1));
    sub_ln1074_1_fu_320_p2 <= std_logic_vector(unsigned(ap_const_lv32_200) - unsigned(rem_fu_94));
    sub_ln1074_2_fu_425_p2 <= std_logic_vector(unsigned(trunc_ln1074_reg_804) - unsigned(trunc_ln1074_1_reg_812));
    sub_ln1074_3_fu_434_p2 <= std_logic_vector(unsigned(trunc_ln1074_1_reg_812) - unsigned(trunc_ln1074_reg_804));
    sub_ln1074_fu_314_p2 <= std_logic_vector(unsigned(zext_ln1074_fu_310_p1) - unsigned(rem_fu_94));
    sub_ln1082_fu_685_p2 <= std_logic_vector(signed(ap_const_lv5_18) - signed(last_blk_width_cast2_cast_cast_cast8_reg_772));
    
    tmp_2_fu_415_p4_proc : process(val_fu_106)
    variable vlo_cpy : STD_LOGIC_VECTOR(512+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(512+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(512 - 1 downto 0);
    variable tmp_2_fu_415_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(512 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(512 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(512 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(9 - 1 downto 0) := ap_const_lv32_1FF(9 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(9 - 1 downto 0) := ap_const_lv32_0(9 - 1 downto 0);
        v0_cpy := val_fu_106;
        if (vlo_cpy(9 - 1 downto 0) > vhi_cpy(9 - 1 downto 0)) then
            vhi_cpy(9-1 downto 0) := std_logic_vector(512-1-unsigned(ap_const_lv32_0(9-1 downto 0)));
            vlo_cpy(9-1 downto 0) := std_logic_vector(512-1-unsigned(ap_const_lv32_1FF(9-1 downto 0)));
            for tmp_2_fu_415_p4_i in 0 to 512-1 loop
                v0_cpy(tmp_2_fu_415_p4_i) := val_fu_106(512-1-tmp_2_fu_415_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(9-1 downto 0)))));

        section := (others=>'0');
        section(9-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(9-1 downto 0)) - unsigned(vlo_cpy(9-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(512-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_2_fu_415_p4 <= resvalue(512-1 downto 0);
    end process;

    
    tmp_fu_626_p4_proc : process(shl_ln1071_fu_620_p2)
    variable vlo_cpy : STD_LOGIC_VECTOR(24+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(24+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(24 - 1 downto 0);
    variable tmp_fu_626_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(24 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(24 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(24 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_17(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        v0_cpy := shl_ln1071_fu_620_p2;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(24-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(24-1-unsigned(ap_const_lv32_17(5-1 downto 0)));
            for tmp_fu_626_p4_i in 0 to 24-1 loop
                v0_cpy(tmp_fu_626_p4_i) := shl_ln1071_fu_620_p2(24-1-tmp_fu_626_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(24-1 downto 0)))));
        res_mask := res_mask(24-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_fu_626_p4 <= resvalue(24-1 downto 0);
    end process;

    trunc_ln1049_fu_581_p1 <= val_2_reg_881(24 - 1 downto 0);
    trunc_ln1067_1_fu_361_p1 <= rem_fu_94(5 - 1 downto 0);
    trunc_ln1067_2_fu_535_p1 <= lshr_ln1067_reg_876(24 - 1 downto 0);
    trunc_ln1067_3_fu_543_p1 <= lshr_ln1067_1_fu_538_p2(24 - 1 downto 0);
    trunc_ln1067_fu_357_p1 <= rem_fu_94(9 - 1 downto 0);
    trunc_ln1071_1_fu_397_p1 <= add_ln1071_fu_371_p2(5 - 1 downto 0);
    trunc_ln1071_fu_584_p1 <= lshr_ln1071_reg_886(24 - 1 downto 0);
    trunc_ln1074_1_fu_336_p1 <= sub_ln1074_fu_314_p2(9 - 1 downto 0);
    trunc_ln1074_2_fu_461_p1 <= lshr_ln1074_fu_455_p2(24 - 1 downto 0);
    trunc_ln1074_3_fu_526_p1 <= lshr_ln1074_1_fu_520_p2(24 - 1 downto 0);
    trunc_ln1074_fu_332_p1 <= sub_ln1074_1_fu_320_p2(9 - 1 downto 0);
    xf_bits_per_clock_fu_264_p3 <= 
        last_blk_width_load when (bLast_width_reg_781(0) = '1') else 
        ap_const_lv4_8;
    xor_ln1071_1_fu_661_p2 <= (ap_const_lv24_FFFFFF xor and_ln1071_1_fu_655_p2);
    xor_ln1071_fu_474_p2 <= (sub_ln1071_reg_837 xor ap_const_lv9_1FF);
    xor_ln1074_1_fu_510_p2 <= (select_ln1074_1_fu_505_p3 xor ap_const_lv9_1FF);
    xor_ln1074_fu_429_p2 <= (trunc_ln1074_reg_804 xor ap_const_lv9_1FF);
    zext_ln1054_fu_212_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_fu_98),32));
    zext_ln1060_1_fu_278_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln1060_fu_270_p1),6));
    zext_ln1060_fu_274_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln1060_fu_270_p1),32));
    zext_ln1061_fu_288_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ptr_width_minus_fu_282_p3),32));
    zext_ln1067_1_fu_558_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln1067_1_fu_553_p2),24));
    zext_ln1067_fu_465_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln1067_reg_832),512));
    zext_ln1071_1_fu_609_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln1071_2_fu_603_p3),24));
    zext_ln1071_2_fu_613_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln1071_1_fu_598_p3),24));
    zext_ln1071_3_fu_617_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln1071_2_reg_891),24));
    zext_ln1071_fu_479_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln1071_fu_474_p2),512));
    zext_ln1074_1_fu_451_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln1074_3_fu_445_p3),512));
    zext_ln1074_2_fu_516_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln1074_1_fu_510_p2),512));
    zext_ln1074_fu_310_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln1074_fu_303_p3),32));
    zext_ln1082_fu_690_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln1082_fu_685_p2),24));
end behav;
