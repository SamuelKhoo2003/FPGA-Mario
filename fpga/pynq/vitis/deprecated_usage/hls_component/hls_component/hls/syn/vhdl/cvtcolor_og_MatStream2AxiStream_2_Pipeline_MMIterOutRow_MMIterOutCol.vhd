-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity cvtcolor_og_MatStream2AxiStream_2_Pipeline_MMIterOutRow_MMIterOutCol is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    imgOutput0_data_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    imgOutput0_data_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    imgOutput0_data_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    imgOutput0_data_empty_n : IN STD_LOGIC;
    imgOutput0_data_read : OUT STD_LOGIC;
    ldata_din : OUT STD_LOGIC_VECTOR (511 downto 0);
    ldata_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    ldata_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    ldata_full_n : IN STD_LOGIC;
    ldata_write : OUT STD_LOGIC;
    bound : IN STD_LOGIC_VECTOR (31 downto 0);
    empty : IN STD_LOGIC_VECTOR (15 downto 0);
    sub : IN STD_LOGIC_VECTOR (31 downto 0);
    last_blk_width_load : IN STD_LOGIC_VECTOR (3 downto 0);
    cols_bound_per_npc_load : IN STD_LOGIC_VECTOR (31 downto 0);
    localbuffer_out : OUT STD_LOGIC_VECTOR (511 downto 0);
    localbuffer_out_ap_vld : OUT STD_LOGIC;
    filled_out : OUT STD_LOGIC_VECTOR (9 downto 0);
    filled_out_ap_vld : OUT STD_LOGIC );
end;


architecture behav of cvtcolor_og_MatStream2AxiStream_2_Pipeline_MMIterOutRow_MMIterOutCol is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv512_lc_1 : STD_LOGIC_VECTOR (511 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv10_200 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv11_200 : STD_LOGIC_VECTOR (10 downto 0) := "01000000000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal icmp_ln1301_reg_448 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1315_reg_457 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_predicate_op43_read_state3 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal icmp_ln1301_reg_448_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1324_reg_473 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1324_reg_473_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_predicate_op67_write_state5 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln1301_fu_200_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal imgOutput0_data_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ldata_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln1301_reg_448_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal bLast_fu_231_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bLast_reg_452 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1315_fu_236_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal filled_1_reg_461 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln1324_fu_277_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln1314_fu_303_p1 : STD_LOGIC_VECTOR (511 downto 0);
    signal zext_ln1314_reg_477 : STD_LOGIC_VECTOR (511 downto 0);
    signal tempval_fu_310_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal tempval_reg_483 : STD_LOGIC_VECTOR (511 downto 0);
    signal tmp_1_reg_488 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln1332_fu_333_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln1332_reg_493 : STD_LOGIC_VECTOR (9 downto 0);
    signal sub_ln1332_1_fu_341_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln1332_1_reg_498 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_condition_exit_pp0_iter2_stage0 : STD_LOGIC;
    signal ap_phi_mux_conv3_i12_i_i923_pn_phi_fu_160_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln_fu_283_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_phi_reg_pp0_iter2_conv3_i12_i_i923_pn_reg_157 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln1313_fu_266_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_phi_reg_pp0_iter0_val_1_reg_166 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_reg_pp0_iter1_val_1_reg_166 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_reg_pp0_iter2_val_1_reg_166 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_reg_pp0_iter3_val_1_reg_166 : STD_LOGIC_VECTOR (7 downto 0);
    signal filled_fu_84 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    signal filled_next_fu_292_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal localbuffer_fu_88 : STD_LOGIC_VECTOR (511 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    signal localbuffer_2_fu_372_p3 : STD_LOGIC_VECTOR (511 downto 0);
    signal localbuffer_1_fu_350_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal j_fu_92 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal add_ln1306_fu_241_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal indvar_flatten_fu_96 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal add_ln1301_fu_205_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal icmp_ln1306_fu_214_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln1294_fu_219_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln1306_fu_227_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal xf_bits_per_clock_fu_260_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal sub_ln1324_fu_271_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln1320_fu_307_p1 : STD_LOGIC_VECTOR (511 downto 0);
    signal zext_ln1332_fu_316_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln1332_fu_319_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln1332_1_fu_337_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln1332_1_fu_356_p1 : STD_LOGIC_VECTOR (511 downto 0);
    signal zext_ln1332_2_fu_364_p1 : STD_LOGIC_VECTOR (511 downto 0);
    signal shl_ln1332_fu_359_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal lshr_ln1332_fu_367_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_condition_195 : BOOLEAN;
    signal ap_condition_400 : BOOLEAN;
    signal ap_condition_403 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component cvtcolor_og_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component cvtcolor_og_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter1_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter3_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter2_stage0)) then 
                    ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_phi_reg_pp0_iter2_val_1_reg_166_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_195)) then
                if (((icmp_ln1301_fu_200_p2 = ap_const_lv1_0) and (icmp_ln1315_fu_236_p2 = ap_const_lv1_0))) then 
                    ap_phi_reg_pp0_iter2_val_1_reg_166 <= ap_const_lv8_0;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter2_val_1_reg_166 <= ap_phi_reg_pp0_iter1_val_1_reg_166;
                end if;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter3_val_1_reg_166_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then
                if (((icmp_ln1315_reg_457 = ap_const_lv1_1) and (icmp_ln1301_reg_448 = ap_const_lv1_0))) then 
                    ap_phi_reg_pp0_iter3_val_1_reg_166 <= imgOutput0_data_dout;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter3_val_1_reg_166 <= ap_phi_reg_pp0_iter2_val_1_reg_166;
                end if;
            end if; 
        end if;
    end process;

    filled_fu_84_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    filled_fu_84 <= ap_const_lv10_0;
                elsif (((icmp_ln1301_reg_448 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
                    filled_fu_84 <= filled_next_fu_292_p2;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten_fu_96_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten_fu_96 <= ap_const_lv32_0;
                elsif (((icmp_ln1301_fu_200_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    indvar_flatten_fu_96 <= add_ln1301_fu_205_p2;
                end if;
            end if; 
        end if;
    end process;

    j_fu_92_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    j_fu_92 <= ap_const_lv16_0;
                elsif (((icmp_ln1301_fu_200_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    j_fu_92 <= add_ln1306_fu_241_p2;
                end if;
            end if; 
        end if;
    end process;

    localbuffer_fu_88_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    localbuffer_fu_88 <= ap_const_lv512_lc_1;
                elsif ((ap_const_boolean_1 = ap_condition_403)) then 
                    localbuffer_fu_88 <= localbuffer_1_fu_350_p2;
                elsif ((ap_const_boolean_1 = ap_condition_400)) then 
                    localbuffer_fu_88 <= localbuffer_2_fu_372_p3;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
                bLast_reg_452 <= bLast_fu_231_p2;
                icmp_ln1301_reg_448 <= icmp_ln1301_fu_200_p2;
                icmp_ln1315_reg_457 <= icmp_ln1315_fu_236_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                icmp_ln1301_reg_448_pp0_iter2_reg <= icmp_ln1301_reg_448;
                icmp_ln1301_reg_448_pp0_iter3_reg <= icmp_ln1301_reg_448_pp0_iter2_reg;
                icmp_ln1324_reg_473 <= icmp_ln1324_fu_277_p2;
                icmp_ln1324_reg_473_pp0_iter3_reg <= icmp_ln1324_reg_473;
                sub_ln1332_1_reg_498 <= sub_ln1332_1_fu_341_p2;
                tempval_reg_483 <= tempval_fu_310_p2;
                tmp_1_reg_488 <= sub_ln1332_fu_319_p2(10 downto 10);
                trunc_ln1332_reg_493 <= trunc_ln1332_fu_333_p1;
                    zext_ln1314_reg_477(7 downto 0) <= zext_ln1314_fu_303_p1(7 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_phi_reg_pp0_iter1_val_1_reg_166 <= ap_phi_reg_pp0_iter0_val_1_reg_166;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then
                filled_1_reg_461 <= filled_fu_84;
            end if;
        end if;
    end process;
    zext_ln1314_reg_477(511 downto

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln1301_fu_205_p2 <= std_logic_vector(unsigned(indvar_flatten_fu_96) + unsigned(ap_const_lv32_1));
    add_ln1306_fu_241_p2 <= std_logic_vector(unsigned(select_ln1294_fu_219_p3) + unsigned(ap_const_lv16_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter4, ap_block_state3_pp0_stage0_iter2, ap_block_state5_pp0_stage0_iter4)
    begin
                ap_block_pp0_stage0_01001 <= (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state5_pp0_stage0_iter4)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state3_pp0_stage0_iter2)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter4, ap_block_state3_pp0_stage0_iter2, ap_block_state5_pp0_stage0_iter4)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state5_pp0_stage0_iter4)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state3_pp0_stage0_iter2)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter4, ap_block_state3_pp0_stage0_iter2, ap_block_state5_pp0_stage0_iter4)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state5_pp0_stage0_iter4)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state3_pp0_stage0_iter2)));
    end process;


    ap_block_state3_pp0_stage0_iter2_assign_proc : process(imgOutput0_data_empty_n, ap_predicate_op43_read_state3)
    begin
                ap_block_state3_pp0_stage0_iter2 <= ((ap_predicate_op43_read_state3 = ap_const_boolean_1) and (imgOutput0_data_empty_n = ap_const_logic_0));
    end process;


    ap_block_state5_pp0_stage0_iter4_assign_proc : process(ldata_full_n, ap_predicate_op67_write_state5)
    begin
                ap_block_state5_pp0_stage0_iter4 <= ((ap_predicate_op67_write_state5 = ap_const_boolean_1) and (ldata_full_n = ap_const_logic_0));
    end process;


    ap_condition_195_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
                ap_condition_195 <= ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_condition_400_assign_proc : process(ap_enable_reg_pp0_iter4, icmp_ln1301_reg_448_pp0_iter3_reg, icmp_ln1324_reg_473_pp0_iter3_reg)
    begin
                ap_condition_400 <= ((icmp_ln1324_reg_473_pp0_iter3_reg = ap_const_lv1_0) and (icmp_ln1301_reg_448_pp0_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1));
    end process;


    ap_condition_403_assign_proc : process(ap_enable_reg_pp0_iter4, icmp_ln1301_reg_448_pp0_iter3_reg, icmp_ln1324_reg_473_pp0_iter3_reg)
    begin
                ap_condition_403 <= ((icmp_ln1324_reg_473_pp0_iter3_reg = ap_const_lv1_1) and (icmp_ln1301_reg_448_pp0_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1));
    end process;


    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, icmp_ln1301_fu_200_p2)
    begin
        if (((icmp_ln1301_fu_200_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_exit_pp0_iter2_stage0_assign_proc : process(ap_enable_reg_pp0_iter2, icmp_ln1301_reg_448, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln1301_reg_448 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            ap_condition_exit_pp0_iter2_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter2_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter3_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter3_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter1_stage0;

    ap_phi_mux_conv3_i12_i_i923_pn_phi_fu_160_p4_assign_proc : process(icmp_ln1301_reg_448, icmp_ln1324_fu_277_p2, or_ln_fu_283_p3, ap_phi_reg_pp0_iter2_conv3_i12_i_i923_pn_reg_157, zext_ln1313_fu_266_p1)
    begin
        if ((icmp_ln1301_reg_448 = ap_const_lv1_0)) then
            if ((icmp_ln1324_fu_277_p2 = ap_const_lv1_1)) then 
                ap_phi_mux_conv3_i12_i_i923_pn_phi_fu_160_p4 <= zext_ln1313_fu_266_p1;
            elsif ((icmp_ln1324_fu_277_p2 = ap_const_lv1_0)) then 
                ap_phi_mux_conv3_i12_i_i923_pn_phi_fu_160_p4 <= or_ln_fu_283_p3;
            else 
                ap_phi_mux_conv3_i12_i_i923_pn_phi_fu_160_p4 <= ap_phi_reg_pp0_iter2_conv3_i12_i_i923_pn_reg_157;
            end if;
        else 
            ap_phi_mux_conv3_i12_i_i923_pn_phi_fu_160_p4 <= ap_phi_reg_pp0_iter2_conv3_i12_i_i923_pn_reg_157;
        end if; 
    end process;

    ap_phi_reg_pp0_iter0_val_1_reg_166 <= "XXXXXXXX";
    ap_phi_reg_pp0_iter2_conv3_i12_i_i923_pn_reg_157 <= "XXXXXXXXXX";

    ap_predicate_op43_read_state3_assign_proc : process(icmp_ln1301_reg_448, icmp_ln1315_reg_457)
    begin
                ap_predicate_op43_read_state3 <= ((icmp_ln1315_reg_457 = ap_const_lv1_1) and (icmp_ln1301_reg_448 = ap_const_lv1_0));
    end process;


    ap_predicate_op67_write_state5_assign_proc : process(icmp_ln1301_reg_448_pp0_iter3_reg, icmp_ln1324_reg_473_pp0_iter3_reg)
    begin
                ap_predicate_op67_write_state5 <= ((icmp_ln1324_reg_473_pp0_iter3_reg = ap_const_lv1_0) and (icmp_ln1301_reg_448_pp0_iter3_reg = ap_const_lv1_0));
    end process;


    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;

    bLast_fu_231_p2 <= "1" when (sub = zext_ln1306_fu_227_p1) else "0";
    filled_next_fu_292_p2 <= std_logic_vector(unsigned(ap_phi_mux_conv3_i12_i_i923_pn_phi_fu_160_p4) + unsigned(filled_fu_84));
    filled_out <= filled_1_reg_461;

    filled_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln1301_reg_448_pp0_iter2_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln1301_reg_448_pp0_iter2_reg = ap_const_lv1_1))) then 
            filled_out_ap_vld <= ap_const_logic_1;
        else 
            filled_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln1301_fu_200_p2 <= "1" when (indvar_flatten_fu_96 = bound) else "0";
    icmp_ln1306_fu_214_p2 <= "1" when (j_fu_92 = empty) else "0";
    icmp_ln1315_fu_236_p2 <= "1" when (signed(zext_ln1306_fu_227_p1) < signed(cols_bound_per_npc_load)) else "0";
    icmp_ln1324_fu_277_p2 <= "1" when (unsigned(sub_ln1324_fu_271_p2) > unsigned(filled_fu_84)) else "0";

    imgOutput0_data_blk_n_assign_proc : process(ap_enable_reg_pp0_iter2, imgOutput0_data_empty_n, ap_predicate_op43_read_state3, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_predicate_op43_read_state3 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            imgOutput0_data_blk_n <= imgOutput0_data_empty_n;
        else 
            imgOutput0_data_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    imgOutput0_data_read_assign_proc : process(ap_enable_reg_pp0_iter2, ap_predicate_op43_read_state3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_predicate_op43_read_state3 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            imgOutput0_data_read <= ap_const_logic_1;
        else 
            imgOutput0_data_read <= ap_const_logic_0;
        end if; 
    end process;


    ldata_blk_n_assign_proc : process(ap_enable_reg_pp0_iter4, ldata_full_n, ap_predicate_op67_write_state5, ap_block_pp0_stage0)
    begin
        if (((ap_predicate_op67_write_state5 = ap_const_boolean_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            ldata_blk_n <= ldata_full_n;
        else 
            ldata_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    ldata_din <= (tempval_reg_483 or localbuffer_fu_88);

    ldata_write_assign_proc : process(ap_enable_reg_pp0_iter4, ap_predicate_op67_write_state5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_predicate_op67_write_state5 = ap_const_boolean_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            ldata_write <= ap_const_logic_1;
        else 
            ldata_write <= ap_const_logic_0;
        end if; 
    end process;

    localbuffer_1_fu_350_p2 <= (tempval_reg_483 or localbuffer_fu_88);
    localbuffer_2_fu_372_p3 <= 
        shl_ln1332_fu_359_p2 when (tmp_1_reg_488(0) = '1') else 
        lshr_ln1332_fu_367_p2;
    localbuffer_out <= localbuffer_fu_88;

    localbuffer_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln1301_reg_448_pp0_iter2_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln1301_reg_448_pp0_iter2_reg = ap_const_lv1_1))) then 
            localbuffer_out_ap_vld <= ap_const_logic_1;
        else 
            localbuffer_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    lshr_ln1332_fu_367_p2 <= std_logic_vector(shift_right(unsigned(zext_ln1314_reg_477),to_integer(unsigned('0' & zext_ln1332_2_fu_364_p1(31-1 downto 0)))));
    or_ln_fu_283_p3 <= (ap_const_lv6_20 & xf_bits_per_clock_fu_260_p3);
    select_ln1294_fu_219_p3 <= 
        ap_const_lv16_0 when (icmp_ln1306_fu_214_p2(0) = '1') else 
        j_fu_92;
    shl_ln1332_fu_359_p2 <= std_logic_vector(shift_left(unsigned(zext_ln1314_reg_477),to_integer(unsigned('0' & zext_ln1332_1_fu_356_p1(31-1 downto 0)))));
    sub_ln1324_fu_271_p2 <= std_logic_vector(signed(ap_const_lv10_200) - signed(zext_ln1313_fu_266_p1));
    sub_ln1332_1_fu_341_p2 <= std_logic_vector(unsigned(ap_const_lv9_0) - unsigned(trunc_ln1332_1_fu_337_p1));
    sub_ln1332_fu_319_p2 <= std_logic_vector(unsigned(ap_const_lv11_200) - unsigned(zext_ln1332_fu_316_p1));
    tempval_fu_310_p2 <= std_logic_vector(shift_left(unsigned(zext_ln1314_fu_303_p1),to_integer(unsigned('0' & zext_ln1320_fu_307_p1(31-1 downto 0)))));
    trunc_ln1332_1_fu_337_p1 <= sub_ln1332_fu_319_p2(9 - 1 downto 0);
    trunc_ln1332_fu_333_p1 <= sub_ln1332_fu_319_p2(10 - 1 downto 0);
    xf_bits_per_clock_fu_260_p3 <= 
        last_blk_width_load when (bLast_reg_452(0) = '1') else 
        ap_const_lv4_8;
    zext_ln1306_fu_227_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln1294_fu_219_p3),32));
    zext_ln1313_fu_266_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xf_bits_per_clock_fu_260_p3),10));
    zext_ln1314_fu_303_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_reg_pp0_iter3_val_1_reg_166),512));
    zext_ln1320_fu_307_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(filled_1_reg_461),512));
    zext_ln1332_1_fu_356_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln1332_1_reg_498),512));
    zext_ln1332_2_fu_364_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln1332_reg_493),512));
    zext_ln1332_fu_316_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(filled_1_reg_461),11));
end behav;
